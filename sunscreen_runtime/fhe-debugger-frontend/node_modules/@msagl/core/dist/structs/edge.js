import { Entity } from './entity';
import { Graph } from './graph';
/** characterize edge if it connects an node and its ancestor */
export var ToAncestorEnum;
(function (ToAncestorEnum) {
    /** the source and the target are siblings */
    ToAncestorEnum[ToAncestorEnum["None"] = 0] = "None";
    /** the source is an ancestor of the target */
    ToAncestorEnum[ToAncestorEnum["FromAncestor"] = 1] = "FromAncestor";
    /** the target is an ancestor of the source */
    ToAncestorEnum[ToAncestorEnum["ToAncestor"] = 2] = "ToAncestor";
})(ToAncestorEnum || (ToAncestorEnum = {}));
export class Edge extends Entity {
    constructor(s, t) {
        super();
        this.source = s;
        this.target = t;
        if (s !== t) {
            s.outEdges.add(this);
            t.inEdges.add(this);
        }
        else {
            s.selfEdges.add(this);
        }
    }
    add() {
        if (this.source !== this.target) {
            this.source.outEdges.add(this);
            this.target.inEdges.add(this);
        }
        else {
            this.source.selfEdges.add(this);
        }
    }
    remove() {
        if (this.source !== this.target) {
            this.source.outEdges.delete(this);
            this.target.inEdges.delete(this);
        }
        else {
            this.source.selfEdges.delete(this);
        }
    }
    toString() {
        return '(' + this.source.toString() + '->' + this.target.toString() + ')';
    }
    isInterGraphEdge() {
        return this.source.parent !== this.target.parent;
    }
    EdgeToAncestor() {
        if (this.source instanceof Graph) {
            if (this.target.isDescendantOf(this.source))
                return ToAncestorEnum.FromAncestor;
        }
        if (this.target instanceof Graph) {
            if (this.source.isDescendantOf(this.target))
                return ToAncestorEnum.ToAncestor;
        }
        return ToAncestorEnum.None;
    }
}
//# sourceMappingURL=edge.js.map