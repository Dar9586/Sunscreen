/**
 * Entity is an attribute container with a parent.
 * It also keeps an array of event functions.
 */
export declare abstract class Entity {
    /** keeps entity attributes: for example, drawing attributes, geometry attributes, etc */
    private attrs;
    /** the mechanism to propagate changes in the layout */
    private events;
    /** adds an event function */
    addEvent(event: (data: any) => void): void;
    /** trying to remove an event function */
    removeEvent(event: (data: any) => void): void;
    /** raises all available events on the given data */
    raiseEvents(data: any): void;
    /** removes all the attributes form the entity */
    clearAttr(): void;
    /** sets the attribute at the given position */
    setAttr(position: number, val: any): void;
    /** gets the attribute at the given position */
    getAttr(position: number): any;
    private _parent;
    get parent(): Entity;
    set parent(value: Entity);
    abstract toString(): string;
    getAncestors(): IterableIterator<Entity>;
    /**  Determines if this node is a descendant of the given graph.*/
    isDescendantOf(graph: Entity): boolean;
}
