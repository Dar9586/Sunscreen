import { LinkedList, LinkedListNode } from '@esfx/collections';
import { Point } from '../../../math/geometry';
import { Disc } from './disc';
declare class MinDisc {
    disc: Disc;
    boundary: Array<number>;
    constructor(ps: Point[], b: Array<number>);
    contains(p: Point): boolean;
}
export declare class MoveToFront {
    L: LinkedList<number>;
    ps: Point[];
    disc: Disc;
    boundary: Array<number>;
    constructor(ps: Point[]);
    collinear3(b: Array<number>): boolean;
    mtf_md(lPtr: LinkedListNode<number>, b: Array<number>): MinDisc;
}
/** static methods for obtaining a minimum enclosing disc of a collection of points */
export declare class MinimumEnclosingDisc {
    static LinearComputation(points: Point[]): Disc;
    static SlowComputation(points: Point[]): Disc;
}
export {};
