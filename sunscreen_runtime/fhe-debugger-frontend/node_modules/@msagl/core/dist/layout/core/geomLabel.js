import { Rectangle } from './../../math/geometry/rectangle';
import { Point } from '../../math/geometry';
import { GeomObject } from './geomObject';
export class GeomLabel extends GeomObject {
    constructor(entity, size) {
        super(entity);
        this._isPositioned = false;
        if (size) {
            this.boundingBox = Rectangle.mkPP(new Point(0, 0), new Point(size.width, size.height));
        }
    }
    /** clones but does not bind to the entity and does not set the parent edge*/
    clone() {
        const ret = new GeomLabel(null, null);
        ret.isPositioned = this.isPositioned;
        ret._boundingBox = this._boundingBox.clone();
        ret.attachmentSegmentEnd = this.attachmentSegmentEnd;
        ret.attachmentSegmentStart = this.attachmentSegmentStart;
        return ret;
    }
    get isPositioned() {
        return this._isPositioned;
    }
    set isPositioned(value) {
        this._isPositioned = value;
    }
    get boundingBox() {
        return this._boundingBox;
    }
    set boundingBox(value) {
        this._boundingBox = value;
    }
    setBoundingBox(b) {
        this.isPositioned = true;
        this._boundingBox = b;
    }
    get width() {
        return this.boundingBox.width;
    }
    set width(value) {
        this.boundingBox.width = value;
    }
    get height() {
        return this.boundingBox.height;
    }
    set height(value) {
        this.boundingBox.height = value;
    }
    get center() {
        return this.boundingBox.center;
    }
    set center(value) {
        this.boundingBox.center = value;
    }
    translate(delta) {
        if (this.isPositioned)
            this.center = this.center.add(delta);
    }
    transform(m) {
        if (this.isPositioned)
            this.center = m.multiplyPoint(this.center);
    }
    positionCenter(p) {
        this.boundingBox.center = p;
        this.isPositioned = true;
    }
}
//# sourceMappingURL=geomLabel.js.map