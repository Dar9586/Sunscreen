import { Point } from '../../math/geometry/point';
import { Attribute } from '../../structs/attribute';
import { Entity } from '../../structs/entity';
import { Rectangle } from './../../math/geometry/rectangle';
/** represents a set of functions to handle an event */
export declare class EventHandler {
    forEach(action: (a: any) => any): void;
    private actions;
    subscribe(f: (a: any, b: any) => void): void;
    unsubscribe(f: (a: any, b: any) => void): void;
    raise(a: any, b: any): void;
}
export declare abstract class GeomObject extends Attribute {
    abstract translate(delta: Point): void;
    abstract boundingBox: Rectangle;
    isCollapsed: boolean;
    constructor(entity: Entity);
    static getGeom(attrCont: Entity): GeomObject;
    get parent(): GeomObject;
    rebind(e: Entity): void;
    getAncestors(): IterableIterator<GeomObject>;
}
