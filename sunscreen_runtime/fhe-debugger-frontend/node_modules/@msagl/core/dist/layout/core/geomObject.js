import { Attribute } from '../../structs/attribute';
import { AttributeRegistry } from '../../structs/attributeRegistry';
/** represents a set of functions to handle an event */
export class EventHandler {
    constructor() {
        this.actions = new Set();
    }
    forEach(action) {
        this.actions.forEach((a) => a(action, null));
    }
    subscribe(f) {
        this.actions.add(f);
    }
    unsubscribe(f) {
        this.actions.delete(f);
    }
    raise(a, b) {
        this.actions.forEach((f) => f(a, b));
    }
}
export class GeomObject extends Attribute {
    constructor(entity) {
        super(entity, AttributeRegistry.GeomObjectIndex);
    }
    static getGeom(attrCont) {
        return attrCont.getAttr(AttributeRegistry.GeomObjectIndex);
    }
    get parent() {
        const p = this.entity.parent;
        return p ? GeomObject.getGeom(p) : null;
    }
    rebind(e) {
        this.entity = e;
        this.bind(AttributeRegistry.GeomObjectIndex);
    }
    *getAncestors() {
        let p = this.parent;
        while (p != null) {
            yield p;
            p = p.parent;
        }
    }
}
//# sourceMappingURL=geomObject.js.map