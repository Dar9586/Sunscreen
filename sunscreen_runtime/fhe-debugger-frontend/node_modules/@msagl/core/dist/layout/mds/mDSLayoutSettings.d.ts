import { EdgeRoutingSettings } from '../../routing/EdgeRoutingSettings';
import { CommonLayoutSettings } from '../commonLayoutSettings';
import { ILayoutSettings } from '../iLayoutSettings';
export declare type MdsLayoutSettingsJSON = {
    pivotNumber?: number;
    iterationsWithMajorization?: number;
    scaleX?: number;
    scaleY?: number;
    exponent?: number;
    rotationAngle?: number;
    removeOverlaps?: boolean;
    _callIterationsWithMajorizationThreshold?: number;
};
/** Settings for multi-dimensional scaling */
export declare class MdsLayoutSettings implements ILayoutSettings {
    static fromJSON(s: MdsLayoutSettingsJSON): MdsLayoutSettings;
    toJSON(): MdsLayoutSettingsJSON;
    get NodeSeparation(): number;
    set NodeSeparation(value: number);
    commonSettings: CommonLayoutSettings;
    get edgeRoutingSettings(): EdgeRoutingSettings;
    set edgeRoutingSettings(value: EdgeRoutingSettings);
    private pivotNumber;
    private iterationsWithMajorization;
    private scaleX;
    private scaleY;
    private exponent;
    private rotationAngle;
    private _removeOverlaps;
    /** do not call iterations with majorization, the local layout improvement heuristic, for graph with at least 2000 nodes */
    _callIterationsWithMajorizationThreshold: number;
    get removeOverlaps(): boolean;
    set removeOverlaps(value: boolean);
    get PivotNumber(): number;
    set PivotNumber(value: number);
    /** Number of iterations in distance scaling: these iterations beautify the layout locally. This heuristic is optional , and the property has to be set to zero for a large graph, because each iteration has O(n*n) time, where n is the number of nodes in the graph */
    get IterationsWithMajorization(): number;
    set IterationsWithMajorization(value: number);
    get ScaleX(): number;
    set ScaleX(value: number);
    get ScaleY(): number;
    set ScaleY(value: number);
    get Exponent(): number;
    set Exponent(value: number);
    get RotationAngle(): number;
    set RotationAngle(value: number);
    adjustScale: boolean;
    get AdjustScale(): boolean;
    set AdjustScale(value: boolean);
    GetNumberOfIterationsWithMajorization(nodeCount: number): number;
    get CallIterationsWithMajorizationThreshold(): number;
    set CallIterationsWithMajorizationThreshold(value: number);
}
