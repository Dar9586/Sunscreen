import { GeomGraph } from './core/geomGraph';
import { CancelToken } from '../utils/cancelToken';
import { Graph } from '../structs/graph';
import { GeomEdge } from './core/geomEdge';
import { EdgeRoutingSettings } from '../routing/EdgeRoutingSettings';
import { ILayoutSettings } from './iLayoutSettings';
export declare function enforceLayoutSettings(geomGraph: GeomGraph, ss: ILayoutSettings): void;
export declare function getSettingsFromAncestor(geomGraph: GeomGraph): any;
export declare function layoutGeomGraph(geomGraph: GeomGraph, cancelToken?: CancelToken): void;
export declare function getEdgeRoutingSettingsFromAncestorsOrDefault(geomGraph: GeomGraph): EdgeRoutingSettings;
export declare function routeEdges(geomGraph: GeomGraph, edgesToRoute: GeomEdge[], cancelToken: CancelToken): void;
/** Lays out a GeomGraph, which is possibly disconnected and might have sub-graphs */
export declare function layoutGeomGraphDetailed(geomG: GeomGraph, cancelToken: CancelToken, layoutEngine: (g: GeomGraph, cancelToken: CancelToken, edgeLength: (e: GeomEdge) => number) => void, edgeRouter: (g: GeomGraph, edgesToRoute: GeomEdge[], cancelToken: CancelToken) => void, packing: (g: GeomGraph, subGraphs: GeomGraph[]) => void, randomSeed?: number, 
/** used only for PivotMDS */
edgeLength?: (e: GeomEdge) => number): void;
/** route edges with segments paralles to either X or Y axes */
export declare function routeRectilinearEdges(geomG: GeomGraph, edgesToRoute: GeomEdge[], cancelToken: CancelToken, nodePadding?: number, cornerFitRadius?: number, edgeSeparatian?: number): void;
export declare function geometryIsCreated(graph: Graph): boolean;
export declare function layoutIsCalculated(graph: Graph): boolean;
