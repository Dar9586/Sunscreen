import { GeomEdge, GeomNode } from '../../layout/core';
import { Point } from '../../math/geometry';
import { SmoothedPolyline } from '../../math/geometry/smoothedPolyline';
import { CancelToken } from '../../utils/cancelToken';
import { EdgeRoutingMode } from '../EdgeRoutingMode';
import { Shape } from '../shape';
import { RectilinearEdgeRouter } from './RectilinearEdgeRouter';
export declare class RectilinearInteractiveEditor {
    static CreatePortsAndRouteEdges(cornerFitRadius: number, padding: number, obstacleNodes: Iterable<GeomNode>, geometryEdges: Iterable<GeomEdge>, edgeRoutingMode: EdgeRoutingMode, ct?: CancelToken): void;
    static CreatePortsAndRouteEdges_(cornerFitRadius: number, padding: number, obstacleNodes: Iterable<GeomNode>, geometryEdges: Iterable<GeomEdge>, edgeRoutingMode: EdgeRoutingMode, useSparseVisibilityGraph: boolean, useObstacleRectangles: boolean): void;
    static CreatePortsAndRouteEdges__(cornerFitRadius: number, padding: number, obstacleNodes: Iterable<GeomNode>, geometryEdges: Iterable<GeomEdge>, edgeRoutingMode: EdgeRoutingMode, useSparseVisibilityGraph: boolean): void;
    static FillRouter(cornerFitRadius: number, padding: number, obstacleNodes: Iterable<GeomNode>, geomEdges: Iterable<GeomEdge>, edgeRoutingMode: EdgeRoutingMode): RectilinearEdgeRouter;
    private static FillNodeShapesMap;
    static CreateSelfEdges(selfEdges: Iterable<GeomEdge>, cornerFitRadius: number): void;
    static CreateSimpleEdgeCurveWithGivenFitRadius(edge: GeomEdge, cornerFitRadius: number): void;
    static CreateSimpleEdgeCurve(edge: GeomEdge): void;
    static CreateUnderlyingPolylineForSelfEdge(p0: Point, dx: number, dy: number): SmoothedPolyline;
    static CreateShapeWithRelativeNodeAtCenter(node: GeomNode): Shape;
    private static CalculateCoefficiensUnderSite;
}
