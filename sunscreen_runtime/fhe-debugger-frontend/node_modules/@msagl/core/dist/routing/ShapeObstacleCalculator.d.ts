import { Point } from '..';
import { Polyline } from '../math/geometry/polyline';
import { RectangleNode } from '../math/geometry/RTree/rectangleNode';
import { Shape } from './shape';
import { TightLooseCouple } from './TightLooseCouple';
export declare class ShapeObstacleCalculator {
    tightHierarchy: RectangleNode<Polyline, Point>;
    coupleHierarchy: RectangleNode<TightLooseCouple, Point>;
    loosePolylinesToNodes: Map<Polyline, Set<Node>>;
    RootOfLooseHierarchy: RectangleNode<Shape, Point>;
    constructor(shape: Shape, tightPadding: number, loosePadding: number, shapesToTightLooseCouples: Map<Shape, TightLooseCouple>);
    ShapesToTightLooseCouples: Map<Shape, TightLooseCouple>;
    tightToShape: Map<Polyline, Shape>;
    TightPadding: number;
    LoosePadding: number;
    MainShape: Shape;
    OverlapsDetected: boolean;
    Calculate(randomizationShift: number): void;
    FillTheMapOfShapeToTightLooseCouples(): void;
    TryMapShapeToTightLooseCouple(shape: Shape, tightLooseCouple: TightLooseCouple): void;
    static ShapeIsInsideOfPoly(shape: Shape, tightPolyline: Polyline): boolean;
    CreateTigthLooseCouples(randomizationShift: number): void;
    CreateTightObstacles(): void;
    InitialTightPolyline(shape: Shape): Polyline;
    LoosePolylinesUnderShape(shape: Shape): Array<Polyline>;
}
