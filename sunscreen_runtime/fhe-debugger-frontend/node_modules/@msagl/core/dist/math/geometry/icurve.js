import { Ellipse } from './ellipse';
import { Curve } from './curve';
import { LineSegment } from './lineSegment';
import { BezierSeg } from './bezierSeg';
import { Polyline } from './polyline';
export function parameterSpan(curve) {
    return curve.parEnd - curve.parStart;
}
export function JSONToICurve(json) {
    switch (json.type) {
        case 'ellipse':
            return Ellipse.fromJSON(json.data);
        case 'curve':
            return Curve.fromJSON(json.data);
        case 'lineSegment':
            return LineSegment.fromJSON(json.data);
        case 'bezier':
            return BezierSeg.fromJSON(json.data);
        case 'polyline':
            return Polyline.fromJSON(json.data);
    }
}
function getICurveType(bc) {
    if (bc instanceof Ellipse) {
        return 'ellipse';
    }
    else if (bc instanceof Curve) {
        return 'curve';
    }
    else if (bc instanceof LineSegment) {
        return 'lineSegment';
    }
    else if (bc instanceof BezierSeg) {
        return 'bezier';
    }
    else if (bc instanceof Polyline) {
        return 'polyline';
    }
    else {
        throw new Error('not implemented');
    }
}
export function iCurveToJSON(bc) {
    return { type: getICurveType(bc), data: bc.toJSON() };
}
//# sourceMappingURL=icurve.js.map