import { Entity, Point } from '@msagl/core';
export declare class UndoList {
    updateDeltaForDragUndo(delta: Point): void;
    registerForUndoDrag(entity: Entity): void;
    registerDelete(entity: Entity): void;
    registerAdd(entity: Entity): void;
    entitiesToBeChangedByRedo(): IterableIterator<Entity>;
    entitiesToBeChangedByUndo(): IterableIterator<Entity>;
    private currentBridge;
    /** registers some attributes of the entity for undo */
    registerForUndo(e: Entity): void;
    canUndo(): boolean;
    canRedo(): boolean;
    undo(): void;
    redo(): void;
    /** If the current undo has not been undone, the adds the "action" after the currentUndo and sets currentUndo=action .
     * Otherwise, when the currentBridge is undone, the current undo is replaced by the action.
     * In both cases the tail of the current undo, which is reached through this.currentBridge.next, is lost.
     */
    createUndoPoint(): void;
}
