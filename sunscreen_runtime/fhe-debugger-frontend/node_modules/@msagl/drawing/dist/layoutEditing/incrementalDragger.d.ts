import { GeomEdge, GeomGraph, GeomNode, ILayoutSettings, Point, Polyline, Rectangle } from '@msagl/core';
import { BumperPusher } from './bumperPusher';
import { LabelFixture } from './labelFixture';
export declare class IncrementalDragger {
    geomGraph_: GeomGraph;
    get geomGraph(): GeomGraph;
    set geomGraph(value: GeomGraph);
    nodeSeparation: number;
    layoutSettings: ILayoutSettings;
    listOfPushers: BumperPusher[];
    pushingNodesArray: GeomNode[];
    /**   it is an edge subset that needs to be refreshed by the viewer*/
    changedEdges: GeomEdge[];
    labelFixtures: Map<GeomEdge, LabelFixture>;
    constructor(pushingNodes: Array<GeomNode>, graph: GeomGraph, layoutSettings: any);
    InitBumperPushers(): void;
    RunPushers(): void;
    Drag(delta: Point): void;
    RouteChangedEdges(): void;
    PositionLabels(changedEdges: GeomEdge[]): void;
    PositionEdgeLabel(edge: GeomEdge): void;
    InitLabelFixtures(edges: Iterable<GeomEdge>): void;
    InitLabelFixture(edge: GeomEdge): void;
    GetChangedEdges(changedNodes: Set<GeomNode>): Array<GeomEdge>;
    EdgeNeedsRouting(box: Rectangle, edge: GeomEdge, boxPolyline: Polyline, changedNodes: Set<GeomNode>): boolean;
    GetChangedNodes(): Set<GeomNode>;
}
