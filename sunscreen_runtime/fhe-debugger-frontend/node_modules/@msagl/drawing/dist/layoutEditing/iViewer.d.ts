/**   the interface for the viewer for editing the graph layout, and the graph */
import { Edge, EventHandler, GeomEdge, Graph, PlaneTransformation, Point, Node } from '@msagl/core';
import { IViewerEdge } from './iViewerEdge';
import { IViewerGraph } from './iViewerGraph';
import { IViewerNode } from './iViewerNode';
import { IViewerObject } from './iViewerObject';
import { ModifierKeysEnum } from './modifierKeys';
export declare enum InsertionMode {
    Default = 0,
    Node = 1,
    Edge = 2
}
export interface IViewer {
    setObjectUnderCursorFromEvent(e: PointerEvent): unknown;
    /** creates an undo action to the current state */
    createUndoPoint(): void;
    /** returns the array of the entities that are currently selected */
    selectedEntities(): Array<IViewerObject>;
    /** maps a point in the screen coordinates to the point in the graph coordinates*/
    screenToSource(e: PointerEvent): Point;
    IncrementalDraggingModeAlways: boolean;
    CurrentScale: number;
    /** Creates a visual element for the node, and the corresponding geometry node is created according
     *  to the size of the visual element.  If the latter is not null then the node width and the node
     *  height will be taken from the visual element.
     * Returns IViewerNode.
     */
    createIViewerNodeNPA(drawingNode: Node, center: Point, visualElement: any): IViewerNode;
    createIViewerNodeN(drawingNode: Node, center: Point): IViewerNode;
    /**  if set to true the Graph geometry is unchanged after the assignment viewer.Graph=graph; */
    needToCalculateLayout: boolean;
    viewChangeEvent: EventHandler;
    objectUnderMouseCursorChanged: EventHandler;
    /** Returns the object under the cursor and null if there is none */
    objectUnderMouseCursor: IViewerObject;
    invalidate(objectToInvalidate: IViewerObject): void;
    invalidateAll(): void;
    modifierKeys: ModifierKeysEnum;
    entities: Iterable<IViewerObject>;
    DpiX: number;
    DpiY: number;
    LineThicknessForEditing: number;
    layoutEditingEnabled: boolean;
    insertionMode: InsertionMode;
    PopupMenus(menuItems: Array<[string, () => void]>): void;
    smoothedPolylineCircleRadius: number;
    graph: Graph;
    addEdge(edge: IViewerEdge, registerForUndo: boolean): void;
    createEdgeWithGivenGeometry(drawingEdge: Edge): IViewerEdge;
    addNode(node: IViewerNode, registerForUndo: boolean): void;
    /**removes an edge from the graph */
    remove(obj: IViewerObject, registerForUndo: boolean): void;
    RouteEdge(drawingEdge: Edge): IViewerEdge;
    ViewerGraph: IViewerGraph;
    ArrowheadLength: number;
    SetSourcePortForEdgeRouting(portLocation: Point): void;
    setTargetPortForEdgeRouting(portLocation: Point): void;
    RemoveSourcePortEdgeRouting(): void;
    RemoveTargetPortEdgeRouting(): void;
    drawRubberEdge(edgeGeometry: GeomEdge): void;
    stopDrawingRubberEdge(): void;
    Transform: PlaneTransformation;
    undo(): void;
    redo(): void;
}
