import { Color } from './color';
import { Attribute, AttributeRegistry } from '@msagl/core';
/** DrawingObject ment to be an attribute on an Entity, with some additional information necessery for rendering. Many fields of this class support of Dot language */
export class DrawingObject extends Attribute {
    constructor(entity) {
        super(entity, AttributeRegistry.DrawingObjectIndex);
        this.labelfontcolor = Color.Black;
        this.styles = [];
        this.penwidth = 1;
        this.fontname = DrawingObject.defaultLabelFontName;
        this.fontsize = DrawingObject.defaultLabelFontSize;
    }
    rebind(e) {
        this.entity = e;
        this.bind(AttributeRegistry.DrawingObjectIndex);
    }
    static copyValidFields(source, target) {
        if (source == null || target == null)
            return;
        if (source.color && source.color.keyword && source.color.keyword.toLowerCase() !== 'black') {
            target.color = source.color;
        }
        if (source.fillColor) {
            target.fillColor = source.fillColor;
        }
        if (source.labelfontcolor && source.labelfontcolor.keyword.toLowerCase() !== 'black') {
            target.labelfontcolor = source.labelfontcolor;
        }
        if (source.labelText != null && source.labelText !== '' && source.labelText !== source.id) {
            target.labelText = source.labelText;
        }
        if (source.fontColor && source.fontColor.keyword && source.fontColor.keyword.toLowerCase() !== 'black') {
            target.fontColor = source.fontColor;
        }
        if (source.styles && source.styles.length) {
            target.styles = source.styles.map((a) => a);
        }
        if (source.pencolor && source.pencolor.keyword !== 'black') {
            target.pencolor = source.pencolor;
        }
        if (source.penwidth && source.penwidth !== 1) {
            target.penwidth = source.penwidth;
        }
        if (source.rankdir) {
            target.rankdir = source.rankdir;
        }
        if (source.fontname && source.fontname !== DrawingObject.defaultLabelFontName) {
            target.fontname = source.fontname;
        }
        if (source.margin) {
            target.margin = source.margin;
        }
        if (source.fontsize && source.fontsize !== DrawingObject.defaultLabelFontSize) {
            target.fontsize = source.fontsize;
        }
        if (source.orientation) {
            target.orientation = source.orientation;
        }
        if (source.ranksep) {
            target.ranksep = source.ranksep;
        }
        if (source.arrowtail) {
            target.arrowtail = source.arrowtail;
        }
        if (source.arrowhead) {
            target.arrowhead = source.arrowhead;
        }
        if (source.ordering) {
            target.ordering = source.ordering;
        }
        if (source.bgcolor) {
            target.bgcolor = source.bgcolor;
        }
        if (source.pos) {
            target.pos = source.pos;
        }
        if (source.nodesep) {
            target.nodesep = source.nodesep;
        }
        if (source.arrowsize) {
            target.arrowsize = source.arrowsize;
        }
        if (source.samehead) {
            target.samehead = source.samehead;
        }
        if (source.layersep) {
            target.layersep = source.layersep;
        }
        if (source.clusterRank) {
            target.clusterRank = source.clusterRank;
        }
    }
    get labelText() {
        return this._labelText;
    }
    set labelText(value) {
        this._labelText = value;
    }
    get arrowhead() {
        return this._arrowhead;
    }
    set arrowhead(value) {
        this._arrowhead = value;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
    }
    static getDrawingObj(attrCont) {
        if (attrCont == null) {
            return null;
        }
        else {
            return attrCont.getAttr(AttributeRegistry.DrawingObjectIndex);
        }
    }
}
/** the index of the DrawingObject in the list of attributes of Entity */
/**  This is the field from the Graph. It is used to keep the connection with the underlying graph */
// not all attributes can be used in derived classes
DrawingObject.defaultLabelFontName = 'Times-Roman';
DrawingObject.defaultLabelFontSize = 12;
//# sourceMappingURL=drawingObject.js.map