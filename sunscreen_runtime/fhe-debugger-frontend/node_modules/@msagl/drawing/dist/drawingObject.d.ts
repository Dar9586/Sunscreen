import { ArrowTypeEnum } from './arrowTypeEnum';
import { Color } from './color';
import { StyleEnum } from './styleEnum';
import { RankEnum } from './rankEnum';
import { DirTypeEnum } from './dirTypeEnum';
import { OrderingEnum } from './orderingEnum';
import { Attribute, Entity, LayerDirectionEnum, Size } from '@msagl/core';
/** DrawingObject ment to be an attribute on an Entity, with some additional information necessery for rendering. Many fields of this class support of Dot language */
export declare abstract class DrawingObject extends Attribute {
    rebind(e: Entity): void;
    static copyValidFields(source: DrawingObject, target: DrawingObject): void;
    measuredTextSize: Size;
    /** the index of the DrawingObject in the list of attributes of Entity */
    /**  This is the field from the Graph. It is used to keep the connection with the underlying graph */
    static defaultLabelFontName: string;
    static defaultLabelFontSize: number;
    color: Color;
    fillColor: Color;
    labelfontcolor: Color;
    private _labelText;
    get labelText(): string;
    set labelText(value: string);
    headlabel: string;
    taillabel: string;
    fontColor: Color;
    styles: StyleEnum[];
    pencolor: Color;
    penwidth: number;
    peripheries: number;
    size: [number, number];
    rankdir: LayerDirectionEnum;
    fontname: any;
    width: number;
    height: number;
    margin: number;
    len: number;
    fontsize: number;
    minlen: number;
    rank: RankEnum;
    charset: any;
    orientation: any;
    ratio: any;
    weight: number;
    ranksep: number;
    splines: boolean;
    overlap: boolean;
    arrowtail: ArrowTypeEnum;
    private _arrowhead;
    get arrowhead(): ArrowTypeEnum;
    set arrowhead(value: ArrowTypeEnum);
    ordering: OrderingEnum;
    URL: string;
    dir: DirTypeEnum;
    concentrate: boolean;
    compound: boolean;
    lhead: string;
    bgcolor: Color;
    center: boolean;
    pos: [number, number];
    nodesep: number;
    rotate: number;
    arrowsize: number;
    colorscheme: string;
    ltail: string;
    sides: number;
    distortion: number;
    skew: number;
    bb: [number, number, number, number];
    labelloc: string;
    decorate: boolean;
    tailclip: boolean;
    headclip: boolean;
    constraint: boolean;
    gradientangle: number;
    samehead: string;
    href: string;
    imagepath: string;
    image: string;
    labejust: string;
    layers: string[];
    layer: string;
    layersep: number;
    f: number;
    nojustify: boolean;
    root: boolean;
    page: [number, number];
    pname: any;
    kind: any;
    fname: any;
    subkind: any;
    area: number;
    tailport: string;
    headport: string;
    wt: any;
    private _id;
    get id(): string;
    set id(value: string);
    edgetooltip: any;
    headURL: any;
    tailURL: any;
    labelURL: any;
    edgeurl: any;
    tailtooltip: any;
    headtooltip: any;
    shapefile: any;
    xlabel: any;
    sametail: string;
    clusterRank: any;
    constructor(entity: Entity);
    static getDrawingObj(attrCont: Entity): DrawingObject | null;
}
