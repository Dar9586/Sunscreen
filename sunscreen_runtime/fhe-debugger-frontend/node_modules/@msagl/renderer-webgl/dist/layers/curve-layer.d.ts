import { Layer, Accessor, Color, Unit, LayerProps, UpdateParameters, DefaultProps } from '@deck.gl/core/typed';
import { Model } from '@luma.gl/engine';
import { Buffer } from '@luma.gl/webgl';
export declare enum CURVE {
    Line = 0,
    Bezier = 1,
    Arc = 2
}
export declare type CurveLayerProps<DataT> = {
    getDepth?: Buffer;
    widthUnits?: Unit;
    widthScale?: number;
    widthMinPixels?: number;
    widthMaxPixels?: number;
    getCurveType?: Accessor<DataT, CURVE>;
    getResolution?: Accessor<DataT, number>;
    getControlPoints?: Accessor<DataT, number[]>;
    getRange?: Accessor<DataT, [number, number]>;
    getWidth?: Accessor<DataT, number>;
    getColor?: Accessor<DataT, Color>;
} & LayerProps<DataT>;
export default class CurveLayer<DataT> extends Layer<Required<CurveLayerProps<DataT>>> {
    static layerName: string;
    static defaultProps: DefaultProps<CurveLayerProps<any>>;
    state: {
        model?: Model;
        startIndices: number[];
        numInstances: number;
        segments: Uint16Array;
    };
    getShaders(): any;
    initializeState(): void;
    updateState(params: UpdateParameters<this>): void;
    updateGeometry(): void;
    draw({ uniforms }: any): void;
    protected _getModel(gl: WebGLRenderingContext): Model;
    private _getSegments;
}
