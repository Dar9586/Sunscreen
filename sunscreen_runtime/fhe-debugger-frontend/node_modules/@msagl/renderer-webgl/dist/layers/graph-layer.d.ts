import { CompositeLayer, LayersList, GetPickingInfoParams, UpdateParameters } from '@deck.gl/core/typed';
import { TextLayerProps } from '@deck.gl/layers/typed';
import { GeomNode, TileData, TileMap } from '@msagl/core';
import GraphHighlighter from './graph-highlighter';
import { ParsedGraphStyle } from '../styles/graph-style-evaluator';
import type { _Tile2DHeader } from '@deck.gl/geo-layers/typed';
declare type GraphLayerProps = TextLayerProps<GeomNode> & {
    highlighter: GraphHighlighter;
    resolution: number;
    graphStyle: ParsedGraphStyle;
    tileMap?: TileMap;
    tile: _Tile2DHeader;
};
export default class GraphLayer extends CompositeLayer<GraphLayerProps> {
    static defaultProps: {
        resolution: {
            type: string;
            value: number;
        };
        highlighter: {
            type: string;
        };
        fontSize: {
            type: string;
            value: number;
        };
        billboard?: boolean | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        sizeScale?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        sizeUnits?: import("@deck.gl/core/typed").Unit | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: import("@deck.gl/core/typed").Unit;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Unit, value2: import("@deck.gl/core/typed").Unit, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Unit;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Unit, value2: import("@deck.gl/core/typed").Unit, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Unit;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Unit, value2: import("@deck.gl/core/typed").Unit, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Unit;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Unit, value2: import("@deck.gl/core/typed").Unit, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Unit;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Unit, value2: import("@deck.gl/core/typed").Unit, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        sizeMinPixels?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        sizeMaxPixels?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        background?: boolean | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getBackgroundColor?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color> | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getBorderColor?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color> | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getBorderWidth?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, number> | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        backgroundPadding?: [number, number] | [number, number, number, number] | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: [number, number] | [number, number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number] | [number, number, number, number], value2: [number, number] | [number, number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: [number, number] | [number, number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number] | [number, number, number, number], value2: [number, number] | [number, number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: [number, number] | [number, number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number] | [number, number, number, number], value2: [number, number] | [number, number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: [number, number] | [number, number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number] | [number, number, number, number], value2: [number, number] | [number, number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: [number, number] | [number, number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number] | [number, number, number, number], value2: [number, number] | [number, number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        characterSet?: string | string[] | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | Set<string> | ({
            value: string | string[] | Set<string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | string[] | Set<string>, value2: string | string[] | Set<string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: string | string[] | Set<string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | string[] | Set<string>, value2: string | string[] | Set<string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string | string[] | Set<string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | string[] | Set<string>, value2: string | string[] | Set<string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string | string[] | Set<string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | string[] | Set<string>, value2: string | string[] | Set<string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: string | string[] | Set<string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | string[] | Set<string>, value2: string | string[] | Set<string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        fontFamily?: string | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        fontWeight?: string | number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: string | number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | number, value2: string | number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: string | number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | number, value2: string | number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string | number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | number, value2: string | number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string | number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | number, value2: string | number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: string | number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | number, value2: string | number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        lineHeight?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        outlineWidth?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        outlineColor?: import("@deck.gl/core/typed").Color | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        fontSettings?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings | ({
            value: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, value2: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, value2: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, value2: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, value2: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, value2: import("@deck.gl/layers/typed/text-layer/font-atlas-manager").FontSettings, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        wordBreak?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | "break-all" | "break-word" | ({
            value: "break-all" | "break-word";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "break-all" | "break-word", value2: "break-all" | "break-word", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: "break-all" | "break-word";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "break-all" | "break-word", value2: "break-all" | "break-word", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: "break-all" | "break-word";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "break-all" | "break-word", value2: "break-all" | "break-word", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: "break-all" | "break-word";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "break-all" | "break-word", value2: "break-all" | "break-word", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: "break-all" | "break-word";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "break-all" | "break-word", value2: "break-all" | "break-word", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        maxWidth?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getText?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").AccessorFunction<any, string> | ({
            value: import("@deck.gl/core/typed").AccessorFunction<any, string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").AccessorFunction<any, string>, value2: import("@deck.gl/core/typed").AccessorFunction<any, string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").AccessorFunction<any, string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").AccessorFunction<any, string>, value2: import("@deck.gl/core/typed").AccessorFunction<any, string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").AccessorFunction<any, string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").AccessorFunction<any, string>, value2: import("@deck.gl/core/typed").AccessorFunction<any, string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").AccessorFunction<any, string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").AccessorFunction<any, string>, value2: import("@deck.gl/core/typed").AccessorFunction<any, string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").AccessorFunction<any, string>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").AccessorFunction<any, string>, value2: import("@deck.gl/core/typed").AccessorFunction<any, string>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getPosition?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position> | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Position>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getColor?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color> | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, value2: import("@deck.gl/core/typed").Accessor<any, import("@deck.gl/core/typed").Color>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getSize?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, number> | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getAngle?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, number> | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, number>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, number>, value2: import("@deck.gl/core/typed").Accessor<any, number>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getTextAnchor?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle"> | ({
            value: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, value2: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, value2: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, value2: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, value2: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, value2: import("@deck.gl/core/typed").Accessor<any, "end" | "start" | "middle">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getAlignmentBaseline?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom"> | ({
            value: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, value2: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, value2: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, value2: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, value2: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, value2: import("@deck.gl/core/typed").Accessor<any, "center" | "top" | "bottom">, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        getPixelOffset?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").Accessor<any, [number, number]> | ({
            value: import("@deck.gl/core/typed").Accessor<any, [number, number]>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, [number, number]>, value2: import("@deck.gl/core/typed").Accessor<any, [number, number]>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, [number, number]>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, [number, number]>, value2: import("@deck.gl/core/typed").Accessor<any, [number, number]>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, [number, number]>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, [number, number]>, value2: import("@deck.gl/core/typed").Accessor<any, [number, number]>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, [number, number]>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, [number, number]>, value2: import("@deck.gl/core/typed").Accessor<any, [number, number]>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Accessor<any, [number, number]>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Accessor<any, [number, number]>, value2: import("@deck.gl/core/typed").Accessor<any, [number, number]>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        backgroundColor?: import("@deck.gl/core/typed").Color | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        id?: string | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: string;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string, value2: string, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        data?: string | AsyncIterable<any> | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>> | ({
            value: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, value2: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, value2: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, value2: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, value2: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, value2: string | AsyncIterable<any> | import("@deck.gl/core/typed").LayerData<any> | Promise<import("@deck.gl/core/typed").LayerData<any>>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        dataComparator?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ((newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        _dataDiff?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ((newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
            startRow: number;
            endRow?: number;
        }[]) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], value2: (newData: import("@deck.gl/core/typed").LayerData<any>, oldData?: import("@deck.gl/core/typed").LayerData<any>) => {
                startRow: number;
                endRow?: number;
            }[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        dataTransform?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ((data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>) | ({
            value: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, value2: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, value2: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, value2: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, value2: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, value2: (data: import("@deck.gl/core/typed").LayerData<any>, previousData?: import("@deck.gl/core/typed").LayerData<any>) => import("@deck.gl/core/typed").LayerData<any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        fetch?: (<PropsT>(url: string, context: {
            propName: string;
            layer: import("@deck.gl/core/typed").Layer<PropsT>;
            loaders?: import("@loaders.gl/loader-utils").Loader[];
            loadOptions?: any;
            signal?: AbortSignal;
        }) => any) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, value2: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, value2: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, value2: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, value2: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, value2: <PropsT>(url: string, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT>;
                loaders?: import("@loaders.gl/loader-utils").Loader[];
                loadOptions?: any;
                signal?: AbortSignal;
            }) => any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        updateTriggers?: Record<string, any> | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        operation?: "draw" | "mask" | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: "draw" | "mask";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "draw" | "mask", value2: "draw" | "mask", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: "draw" | "mask";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "draw" | "mask", value2: "draw" | "mask", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: "draw" | "mask";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "draw" | "mask", value2: "draw" | "mask", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: "draw" | "mask";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "draw" | "mask", value2: "draw" | "mask", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: "draw" | "mask";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "draw" | "mask", value2: "draw" | "mask", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        visible?: boolean | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        pickable?: boolean | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        opacity?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        coordinateSystem?: import("@deck.gl/core/typed").CoordinateSystem | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: import("@deck.gl/core/typed").CoordinateSystem;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").CoordinateSystem, value2: import("@deck.gl/core/typed").CoordinateSystem, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed").CoordinateSystem;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").CoordinateSystem, value2: import("@deck.gl/core/typed").CoordinateSystem, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").CoordinateSystem;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").CoordinateSystem, value2: import("@deck.gl/core/typed").CoordinateSystem, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").CoordinateSystem;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").CoordinateSystem, value2: import("@deck.gl/core/typed").CoordinateSystem, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed").CoordinateSystem;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").CoordinateSystem, value2: import("@deck.gl/core/typed").CoordinateSystem, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        coordinateOrigin?: [number, number, number] | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: [number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number, number], value2: [number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: [number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number, number], value2: [number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: [number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number, number], value2: [number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: [number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number, number], value2: [number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: [number, number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: [number, number, number], value2: [number, number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        modelMatrix?: import("@deck.gl/core/typed/types/types").NumericArray | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        wrapLongitude?: boolean | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        positionFormat?: "XYZ" | "XY" | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: "XYZ" | "XY";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "XYZ" | "XY", value2: "XYZ" | "XY", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: "XYZ" | "XY";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "XYZ" | "XY", value2: "XYZ" | "XY", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: "XYZ" | "XY";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "XYZ" | "XY", value2: "XYZ" | "XY", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: "XYZ" | "XY";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "XYZ" | "XY", value2: "XYZ" | "XY", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: "XYZ" | "XY";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "XYZ" | "XY", value2: "XYZ" | "XY", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        colorFormat?: "RGBA" | "RGB" | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: "RGBA" | "RGB";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "RGBA" | "RGB", value2: "RGBA" | "RGB", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: "RGBA" | "RGB";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "RGBA" | "RGB", value2: "RGBA" | "RGB", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: "RGBA" | "RGB";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "RGBA" | "RGB", value2: "RGBA" | "RGB", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: "RGBA" | "RGB";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "RGBA" | "RGB", value2: "RGBA" | "RGB", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: "RGBA" | "RGB";
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: "RGBA" | "RGB", value2: "RGBA" | "RGB", propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        parameters?: any;
        transitions?: Record<string, any> | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: Record<string, any>;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: Record<string, any>, value2: Record<string, any>, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        extensions?: any[] | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: any[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: any[], value2: any[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: any[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: any[], value2: any[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: any[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: any[], value2: any[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: any[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: any[], value2: any[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: any[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: any[], value2: any[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        loaders?: import("@loaders.gl/loader-utils").Loader[] | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: import("@loaders.gl/loader-utils").Loader[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@loaders.gl/loader-utils").Loader[], value2: import("@loaders.gl/loader-utils").Loader[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@loaders.gl/loader-utils").Loader[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@loaders.gl/loader-utils").Loader[], value2: import("@loaders.gl/loader-utils").Loader[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@loaders.gl/loader-utils").Loader[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@loaders.gl/loader-utils").Loader[], value2: import("@loaders.gl/loader-utils").Loader[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@loaders.gl/loader-utils").Loader[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@loaders.gl/loader-utils").Loader[], value2: import("@loaders.gl/loader-utils").Loader[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@loaders.gl/loader-utils").Loader[];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@loaders.gl/loader-utils").Loader[], value2: import("@loaders.gl/loader-utils").Loader[], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        loadOptions?: any;
        getPolygonOffset?: ((params: {
            layerIndex: number;
        }) => [number, number]) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: (params: {
                layerIndex: number;
            }) => [number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (params: {
                layerIndex: number;
            }) => [number, number], value2: (params: {
                layerIndex: number;
            }) => [number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (params: {
                layerIndex: number;
            }) => [number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (params: {
                layerIndex: number;
            }) => [number, number], value2: (params: {
                layerIndex: number;
            }) => [number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (params: {
                layerIndex: number;
            }) => [number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (params: {
                layerIndex: number;
            }) => [number, number], value2: (params: {
                layerIndex: number;
            }) => [number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (params: {
                layerIndex: number;
            }) => [number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (params: {
                layerIndex: number;
            }) => [number, number], value2: (params: {
                layerIndex: number;
            }) => [number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (params: {
                layerIndex: number;
            }) => [number, number];
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (params: {
                layerIndex: number;
            }) => [number, number], value2: (params: {
                layerIndex: number;
            }) => [number, number], propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        autoHighlight?: boolean | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        highlightedObjectIndex?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        highlightColor?: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]);
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), value2: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]);
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), value2: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]);
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), value2: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]);
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), value2: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]);
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), value2: number[] | ((pickingInfo: import("@deck.gl/core/typed").PickingInfo) => number[]), propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        onDataLoad?: {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | (<PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
            propName: string;
            layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
        }) => void) | ({
            value: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, value2: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, value2: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, value2: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, value2: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, value2: <PropsT_1>(data: import("@deck.gl/core/typed").LayerData<any>, context: {
                propName: string;
                layer: import("@deck.gl/core/typed").Layer<PropsT_1>;
            }) => void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        onError?: ((error: Error) => boolean | void) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: (error: Error) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (error: Error) => boolean | void, value2: (error: Error) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (error: Error) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (error: Error) => boolean | void, value2: (error: Error) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (error: Error) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (error: Error) => boolean | void, value2: (error: Error) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (error: Error) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (error: Error) => boolean | void, value2: (error: Error) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (error: Error) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (error: Error) => boolean | void, value2: (error: Error) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        onHover?: ((pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        onClick?: ((pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        onDragStart?: ((pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        onDrag?: ((pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        onDragEnd?: ((pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void) | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, value2: (pickingInfo: import("@deck.gl/core/typed").PickingInfo, event: import("mjolnir.js").MjolnirEvent) => boolean | void, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        numInstances?: number | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
        startIndices?: import("@deck.gl/core/typed/types/types").NumericArray | {
            deprecatedFor?: string | string[];
        } | ({
            value: boolean;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: boolean, value2: boolean, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "boolean";
        }) | ({
            value: number;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: number, value2: number, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "number";
            min?: number;
            max?: number;
        }) | ({
            value: import("@deck.gl/core/typed").Color;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Color, value2: import("@deck.gl/core/typed").Color, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "color";
            optional?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed").Texture;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed").Texture, value2: import("@deck.gl/core/typed").Texture, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "image";
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "data";
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "array";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "object";
            optional?: boolean;
            compare?: boolean;
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "accessor";
        }) | ({
            value: import("@deck.gl/core/typed/types/types").NumericArray;
            async?: boolean;
            validate?: (value: any, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
            equal?: (value1: import("@deck.gl/core/typed/types/types").NumericArray, value2: import("@deck.gl/core/typed/types/types").NumericArray, propType: import("@deck.gl/core/typed/lifecycle/prop-types").PropType) => boolean;
        } & {
            type: "function";
            optional?: boolean;
            compare?: boolean;
        });
    };
    static layerName: string;
    state: {
        layerMap: Record<string, TileData>;
    };
    updateState({ props, oldProps, changeFlags }: UpdateParameters<this>): void;
    getPickingInfo({ sourceLayer, info }: GetPickingInfoParams): import("@deck.gl/core/typed").PickingInfo;
    filterSubLayer({ layer, viewport }: any): boolean;
    renderLayers(): LayersList;
}
export {};
