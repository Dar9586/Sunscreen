export declare type GraphStyleSpecification = {
    version: 1;
    layers: (GraphNodeLayerStyle | GraphEdgeLayerStyle)[];
};
export declare const DefaultGraphStyle: GraphStyleSpecification;
export declare type EntityFilter = {
    property: 'id' | 'shape' | 'label' | 'rank' | 'source-id' | 'target-id';
    operator: '=' | '*=' | '^=' | '$=' | '<' | '>' | '<=' | '>=' | '!=';
    value: string | number;
};
export declare type InterpolatorContext = {
    zoom: number;
};
export declare type Interpolation<OutputT> = {
    interpolation: 'step' | 'linear' | 'power';
    interpolationParameters?: number[];
    input: keyof InterpolatorContext;
    inputStops: number[];
    outputStops: OutputT[];
};
declare type GraphLayerStyle = {
    id?: string;
    type: string;
    filter?: EntityFilter | EntityFilter[];
    visible?: boolean;
    minZoom?: number;
    maxZoom?: number;
};
export declare type GraphNodeLayerStyle = GraphLayerStyle & {
    type: 'node';
    size?: number | Interpolation<number>;
    opacity?: number | Interpolation<number>;
    fillColor?: string | Interpolation<string>;
    strokeWidth?: number | Interpolation<number>;
    strokeColor?: string | Interpolation<string>;
    labelSize?: number | Interpolation<number>;
    labelColor?: string | Interpolation<string>;
};
export declare type GraphEdgeLayerStyle = GraphLayerStyle & {
    type: 'edge';
    opacity?: number | Interpolation<number>;
    strokeWidth?: number | Interpolation<number>;
    strokeColor?: string | Interpolation<string>;
    arrowSize?: number | Interpolation<number>;
    arrowColor?: string | Interpolation<string>;
    labelSize?: number | Interpolation<number>;
    labelColor?: string | Interpolation<string>;
};
export {};
