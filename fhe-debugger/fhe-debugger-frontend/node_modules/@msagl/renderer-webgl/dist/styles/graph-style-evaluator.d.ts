import { Entity, TileMap } from '@msagl/core';
import { GraphStyleSpecification, InterpolatorContext } from './graph-style-spec';
export declare type ParsedGraphStyle = {
    layers: (ParsedGraphNodeLayerStyle | ParsedGraphEdgeLayerStyle)[];
};
declare type ParsedGraphLayerStyle = {
    id: string;
    type: string;
    filter: ((e: Entity, context: FilterContext) => boolean) | null;
    visible: boolean;
    minZoom: number;
    maxZoom: number;
};
declare type FilterContext = {
    tileMap?: TileMap;
};
export declare type ValueOrInterpolator<OutputT> = ((context: InterpolatorContext) => OutputT) | OutputT | null;
export declare type ParsedGraphNodeLayerStyle = ParsedGraphLayerStyle & {
    type: 'node';
    size: ValueOrInterpolator<number>;
    opacity: ValueOrInterpolator<number>;
    fillColor: ValueOrInterpolator<number[]>;
    strokeWidth: ValueOrInterpolator<number>;
    strokeColor: ValueOrInterpolator<number[]>;
    labelSize: ValueOrInterpolator<number>;
    labelColor: ValueOrInterpolator<number[]>;
};
/** Internal only */
export declare type ParsedGraphEdgeLayerStyle = ParsedGraphLayerStyle & {
    type: 'edge';
    opacity: ValueOrInterpolator<number>;
    strokeWidth: ValueOrInterpolator<number>;
    strokeColor: ValueOrInterpolator<number[]>;
    arrowSize: ValueOrInterpolator<number>;
    arrowColor: ValueOrInterpolator<number[]>;
    labelSize: ValueOrInterpolator<number>;
    labelColor: ValueOrInterpolator<number[]>;
};
export declare function parseGraphStyle(style: GraphStyleSpecification): ParsedGraphStyle;
export {};
