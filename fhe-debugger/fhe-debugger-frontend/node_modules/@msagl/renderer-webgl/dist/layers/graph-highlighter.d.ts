import { Buffer, Texture2D } from '@luma.gl/webgl';
import { GeomGraph, GeomNode } from '@msagl/core';
export declare const nodeDepthModuleVs = "\nuniform sampler2D nodeDepth;\nuniform vec2 textureDim;\n\nvec2 getCoordinate(vec3 nodeIdx) {\n  // index = r + g * 256 + b * 65536\n  // textureDim.x is always power of 2 and <= 65536\n  // avoid making big integers (float32 precision)\n  float x = nodeIdx.r + nodeIdx.g * 256.0;\n  float y = floor(x / textureDim.x);\n  x -= y * textureDim.x;\n  y += 65536.0 / textureDim.x * nodeIdx.b;\n  return vec2(x + 0.5, y + 0.5) / textureDim;\n}\n\nbool getDepth(vec3 nodeIdx, out float depth) {\n  vec2 coord = getCoordinate(nodeIdx);\n  vec4 c = texture2D(nodeDepth, coord);\n  depth = c.r * 255.0;\n  return c.a == 0.0;\n}\n";
export default class GraphHighlighter {
    private _gl;
    private _graph;
    private _nodeCount;
    private _hasBidirectionalEdge;
    private _nodeMap;
    private _nodeList;
    private _lastSourceId?;
    private _model;
    private _transform;
    private _nodeDepthTextures;
    private _nodeDepth;
    private _nodeDepthFB;
    private _edgeSourceBuffer;
    private _edgeTargetBuffer;
    private _edgeDirectionBuffer;
    private _edgeDepthBuffer;
    constructor(gl: WebGLRenderingContext);
    delete(): void;
    get nodeDepth(): Texture2D;
    get edgeDepth(): Buffer;
    encodeNodeIndex(node: GeomNode, out: number[]): number[];
    getNode(index: number): GeomNode;
    setGraph(graph: GeomGraph): void;
    update(opts: {
        sourceId: string;
        edgeDepth?: boolean;
        maxDepth?: number;
    }): void;
    private _resetNodeDepth;
    private _updateNodeDepth;
}
