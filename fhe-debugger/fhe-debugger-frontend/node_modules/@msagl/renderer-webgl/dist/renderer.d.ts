import { LayoutOptions } from '@msagl/renderer-common';
import { Graph, Rectangle } from '@msagl/core';
import EventSource from './event-source';
import { GraphStyleSpecification } from './styles/graph-style-spec';
export interface IRendererControl {
    onAdd(renderer: Renderer): void;
    onRemove(renderer: Renderer): void;
    getElement(): HTMLElement | null;
}
/**
 * Renders an MSAGL graph with WebGL
 * @event load - fired once when the renderer is initialized
 * @event graphload - fired when a graph is rendered for the first time
 */
export default class Renderer extends EventSource {
    private _deck;
    private _graph?;
    private _layoutOptions;
    private _controls;
    private _controlsContainer;
    private _textMeasurer;
    private _graphHighlighter;
    private _highlightedNodeId;
    private _layoutWorkerUrl?;
    private _style;
    constructor(container?: HTMLElement, layoutWorkerUrl?: string);
    addControl(control: IRendererControl): void;
    removeControl(control: IRendererControl): void;
    get graph(): Graph;
    setStyle(style: GraphStyleSpecification): void;
    /** when the graph is set : the geometry for it is created and the layout is done
     * Explicitly set options to null to use existing geometry
     */
    setGraph(graph: Graph, options?: LayoutOptions | null): Promise<void>;
    setOptions(options: LayoutOptions): Promise<void>;
    zoomTo(rectangle: Rectangle): void;
    highlight(nodeId: string | null): void;
    private _highlight;
    private _layoutGraph;
    private _update;
}
