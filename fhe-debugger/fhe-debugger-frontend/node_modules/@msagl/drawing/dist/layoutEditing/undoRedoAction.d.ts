import { Entity, Attribute, Point } from '@msagl/core';
/** support for undo/redo functionality */
export declare class UndoRedoAction {
    updateDeltaForDragUndo(delta: Point): void;
    registerUndoDrag(entity: Entity): void;
    undo(): void;
    redo(): void;
    /** It adds an entry for the entity if the changes does not contain the entity as a key
     *  Also, only one pair is added for each index.
     *  'old' will be restored by undo  */
    addOldNewPair(entity: Entity, old: Attribute): void;
    registerDelete(entity: Entity): void;
    registerAdd(entity: Entity): void;
    private _canUndo;
    get canRedo(): boolean;
    /** canUndo = true means that the relevant objects, the keys of restoreDataDictionary, have 'old' attributes set up: ready for undo
     *  canUndo = false means that the undo has been done already:
     */
    get canUndo(): boolean;
    set canUndo(v: boolean);
    private data;
    /** iterates over the affected objects */
    entities(): IterableIterator<Entity>;
    next: UndoRedoAction;
    prev: UndoRedoAction;
}
