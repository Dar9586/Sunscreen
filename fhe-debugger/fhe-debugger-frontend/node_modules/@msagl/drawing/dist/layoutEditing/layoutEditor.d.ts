import { Node, Arrowhead, Edge, EdgeRoutingMode, Entity, GeomEdge, GeomGraph, GeomNode, GeomObject, Graph, ICurve, Point, Polyline, SmoothedPolyline, InteractiveEdgeRouter, FloatingPort, Port, CornerSite } from '@msagl/core';
import { IViewerObject } from './iViewerObject';
import { DraggingMode, GeometryGraphEditor } from './geomGraphEditor';
import { ObjectUnderMouseCursorChangedEventArgs } from './objectUnderMouseCursorChangedEventArgs';
import { PolylineCornerType } from './polylineCornerType';
import { IViewer } from './iViewer';
import { DrawingEdge } from '../drawingEdge';
import { IViewerEdge } from './iViewerEdge';
import { IViewerNode } from './iViewerNode';
declare type DelegateForIViewerObject = (o: IViewerObject) => void;
declare type DelegateForEdge = (e: IViewerEdge) => void;
export declare function viewerObj(entity: Entity): IViewerObject;
declare type MouseAndKeysAnalyzer = (mouseEvent: PointerEvent) => boolean;
export declare class LayoutEditor {
    resizeLabel(innerText: string, objectWithEditedLabel: Entity): void;
    get hasEdgeInsertionPort(): boolean;
    get insertingEdge(): boolean;
    createUndoPoint(): void;
    registerDelete(entity: Entity): void;
    registerAdd(entity: Entity): void;
    /** unregister the element from everywhere */
    forget(ent: IViewerObject): void;
    RadiusOfPolylineCorner: number;
    aActiveDraggedObject: IViewerObject;
    activeCornerSite: CornerSite;
    geomEdge: GeomEdge;
    private _interactiveEdgeRouter;
    private _edgeWithSmoothedPolylineExposed;
    get edgeWithSmoothedPolylineExposed(): IViewerEdge;
    set edgeWithSmoothedPolylineExposed(value: IViewerEdge);
    mouseDownScreenPoint: Point;
    EdgeAttr: DrawingEdge;
    arrowheadLength: number;
    get ActiveDraggedObject(): IViewerObject;
    set ActiveDraggedObject(value: IViewerObject);
    cornerInfo: [CornerSite, PolylineCornerType];
    dragGroup: Set<IViewerObject>;
    geomGraphEditor: GeometryGraphEditor;
    private _graph;
    looseObstaclesToTheirViewerNodes: Map<Polyline, Array<IViewerNode>>;
    mouseDownGraphPoint: Point;
    mouseMoveThreshold: number;
    mouseRightButtonDownPoint: Point;
    removeEdgeDraggingDecorations: DelegateForEdge;
    sourceLoosePolylineWrap: {
        loosePolyline: Polyline;
    };
    sourceOfInsertedEdgeWrap: {
        node: IViewerNode;
    };
    sourcePortWrap: {
        port: Port;
    };
    targetOfInsertedEdgeWrap: {
        node: IViewerNode;
    };
    targetPortWrap: {
        port: Port;
    };
    viewer: IViewer;
    get interactiveEdgeRouter(): InteractiveEdgeRouter;
    set interactiveEdgeRouter(value: InteractiveEdgeRouter);
    constructor(viewerPar: IViewer);
    ViewerObjectUnderMouseCursorChanged(sender: any, e: ObjectUnderMouseCursorChangedEventArgs): void;
    ViewChangeEventHandler(sender: any, e: any): void;
    /**  current graph under editing */
    get graph(): Graph;
    set graph(value: Graph);
    get MouseMoveThreshold(): number;
    set MouseMoveThreshold(value: number);
    dragging: boolean;
    decorateObjectForDragging: DelegateForIViewerObject;
    private decorateEdgeForDragging;
    get DecorateEdgeForDragging(): DelegateForEdge;
    set DecorateEdgeForDragging(value: DelegateForEdge);
    decorateEdgeLabelForDragging: DelegateForIViewerObject;
    removeObjDraggingDecorations: DelegateForIViewerObject;
    get RemoveEdgeDraggingDecorations(): DelegateForEdge;
    set RemoveEdgeDraggingDecorations(value: DelegateForEdge);
    private nodeInsertPredicate;
    get NodeInsertPredicate(): MouseAndKeysAnalyzer;
    set NodeInsertPredicate(value: MouseAndKeysAnalyzer);
    leftMouseButtonWasPressed: boolean;
    get SourceOfInsertedEdge(): IViewerNode;
    set SourceOfInsertedEdge(value: IViewerNode);
    get TargetOfInsertedEdge(): IViewerNode;
    set TargetOfInsertedEdge(value: IViewerNode);
    /** gets the port from the wrapper */
    get SourcePort(): Port;
    /** set the port for the wrapper */
    set SourcePort(value: Port);
    /** gets the port from the wrapper */
    get TargetPort(): Port;
    /** sets the port for the wrapper */
    set TargetPort(value: Port);
    get CanUndo(): boolean;
    get CanRedo(): boolean;
    private _insertionMode;
    private get insertionMode();
    private set insertionMode(value);
    viewerGraphChanged(): void;
    cleanObstacles(): void;
    RelayoutOnIsCollapsedChanged(iCluster: IViewerNode): void;
    relayout(cluster: GeomGraph): void;
    ExpandCluster(cluster: GeomGraph): void;
    MakeExpandedNodesVisible(cluster: Graph): void;
    static UnhideNodeEdges(drn: Node): void;
    CollapseCluster(graph: Graph): void;
    static HideCollapsed(cluster: Graph): void;
    defaultObjectDecorator(obj: IViewerObject): void;
    defaultObjectDecoratorRemover(obj: IViewerObject): void;
    static TheDefaultEdgeDecoratorStub(edge: IViewerEdge): void;
    defaultEdgeLabelDecorator(label: IViewerObject): void;
    static LeftButtonIsPressed(e: PointerEvent): boolean;
    static MiddleButtonIsPressed(e: PointerEvent): boolean;
    static RightButtonIsPressed(e: PointerEvent): boolean;
    MouseDownPointAndMouseUpPointsAreFarEnoughOnScreen(e: PointerEvent): boolean;
    analyzeLeftMouseButtonClick(e: PointerEvent): void;
    private analyzeLeftMouseButtonClickOnObjectUnderCursor;
    toggleCornerForSelectedEdge(): void;
    tryInsertCorner(): void;
    closeEnoughToSelectedEdge(): boolean;
    static CreateUnderlyingPolyline(geomEdge: GeomEdge): SmoothedPolyline;
    static CurvePoints(geomEdge: GeomEdge): IterableIterator<Point>;
    ModifierKeyIsPressed(): boolean;
    switchToEdgeEditing(edge: IViewerEdge): void;
    ViewerNodes(): IterableIterator<IViewerNode>;
    selectObjectForDragging(obj: IViewerObject): void;
    prepareToRemoveFromDragGroup(obj: IViewerObject): void;
    unselectForDragging(obj: IViewerObject): void;
    unselectEverything(): void;
    unselectEdge(): void;
    static Edges(node: IViewerNode): IterableIterator<IViewerEdge>;
    viewerMouseDown(sender: any, e: PointerEvent): boolean;
    private insertNode;
    findNodeID(): string;
    viewerMouseMove(sender: any, e: PointerEvent): void;
    setDraggingFlag(e: PointerEvent): void;
    TrySetNodePort(e: PointerEvent, nodeWrapper: {
        node: IViewerNode;
    }, portWr: {
        port: Port;
    }, loosePolylineWrapper: {
        loosePolyline: Polyline;
    }): boolean;
    setPortWhenDraggingStraightLine(portWr: {
        port: Port;
    }, mousePos: Point): IViewerNode;
    CreateOrUpdateCurvePort(t: number, geomNode: GeomNode, port: Port): Port;
    CreateFloatingPort(geomNode: GeomNode, location: Point): FloatingPort;
    SetPortUnderLoosePolyline(mousePos: Point, loosePoly: Polyline, nodeWr: {
        node: IViewerNode;
    }, portWrap: {
        port: Port;
    }): void;
    GetViewerNodesInsideOfLooseObstacle(loosePoly: Polyline): Array<IViewerNode>;
    InitLooseObstaclesToViewerNodeMap(): void;
    SetPortForMousePositionInsideOfNode(mousePosition: Point, node: IViewerNode, port: {
        port: Port;
    }): void;
    static PointIsInside(point: Point, iCurve: ICurve): boolean;
    NeedToCreateBoundaryPort(mousePoint: Point, node: IViewerNode, t: {
        portParameter: number;
    }): boolean;
    TryToSnapToTheSegmentEnd(t: {
        portParameter: number;
    }, c: ICurve, pointOnCurve: Point): void;
    _lastDragPoint: Point;
    drag(e: PointerEvent): void;
    private prepareFirstTimeDragging;
    private handleTheMouseCursorOutOfTheBoundingBox;
    private prepareForDragging;
    GetDraggingMode(): DraggingMode;
    static RouteEdgesRectilinearly(viewer: IViewer): void;
    DraggedGeomObjects(): IterableIterator<GeomObject>;
    static GetActiveObjectCluster(viewerObject: IViewerObject): Graph;
    viewerMouseUp(sender: any, args: PointerEvent): void;
    handleMouseUpOnLayoutEnabled(args: PointerEvent): void;
    edgeAttr: DrawingEdge;
    InsertEdgeOnMouseUp(): void;
    addEdgeToTheViewer(e: Edge): void;
    mkArrowhead(): Arrowhead;
    FinishRoutingEdge(): Edge;
    static CreateEdgeGeometryForSelfEdge(node: Node): GeomEdge;
    SelectEntitiesForDraggingWithRectangle(args: PointerEvent): void;
    /** it also sets this.activeCornerSite */
    mouseIsInsideOfCornerSite(e: PointerEvent): boolean;
    MouseScreenPointIsCloseEnoughToVertex(point: Point, radius: number): boolean;
    invalidate(ent: Entity): void;
    /**   Undoes the editing*/
    undo(): void;
    /**   Redo the editing*/
    redo(): void;
    static RectRouting(mode: EdgeRoutingMode): boolean;
    PrepareForEdgeDragging(): void;
    mouseMoveInsertEdgeNoButtons(e: PointerEvent): void;
    mouseMoveInsertEdgeLeftButtonOn(e: PointerEvent): void;
    MouseMoveLiveSelectObjectsForDragging(e: PointerEvent): void;
    DrawEdgeInteractivelyToLocation(e: PointerEvent, straightLine: boolean): void;
    DrawEdgeInteractivelyToLocationP(point: Point, straightLine: boolean): void;
    getStraightLineEdge(point: Point): GeomEdge;
    CalculateEdgeInteractivelyToLocation(location: Point): GeomEdge;
    drawEdgeInteractivelyToPort(portLoosePolyline: Polyline, straightLine: boolean): void;
    DraggingStraightLine(): boolean;
    CalculateEdgeInteractively(targetPortParameter: Port, portLoosePolyline: Polyline): GeomEdge;
}
export {};
