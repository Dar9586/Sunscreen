import { GeomGraph, Graph, ICurve, Point, Size, Node } from '@msagl/core';
import { DrawingObject } from './drawingObject';
import { DrawingNode } from './drawingNode';
import { TextMeasurerOptions } from './textMeasurerOptions';
declare type GraphVisData = {
    sameRanks: string[][];
    minRanks: string[];
    maxRanks: string[];
    sourceRanks: string[];
    sinkRanks: string[];
};
/**
 * DrawingGraph is an attribute on Graph.
 * It keeps the attributes for nodes and edges rendering.
 *  It facilitates the geometry creation, mostly for the bounding curves of the nodes, from drawing attributes and labels
 * */
export declare class DrawingGraph extends DrawingNode {
    private _defaultNodeObject;
    get defaultNodeObject(): DrawingObject;
    set defaultNodeObject(value: DrawingObject);
    defaultEdgeObject: DrawingObject;
    static getDrawingGraph(g: Graph): DrawingGraph;
    /** this node does not belong to the graph,
     but rather serves as a template for the other node's attributes (like filledColor, style, etc.) */
    graphVisData: GraphVisData;
    get graph(): Graph;
    findNode(id: string): DrawingNode | null;
    hasDirectedEdge(): boolean;
    textMeasure: (text: string, opts: Partial<TextMeasurerOptions>) => Size;
    createGeometry(textMeasure?: (label: string, opts: Partial<TextMeasurerOptions>) => Size): GeomGraph;
    private createEdgeGeometry;
    curveByShape(width: number, height: number, center: Point, drawingNode: DrawingNode): ICurve;
    createNodeGeometry(n: Node, center?: Point): void;
    measureLabelSizes(textMeasure: (text: string, opts: Partial<TextMeasurerOptions>) => Size): void;
}
export {};
