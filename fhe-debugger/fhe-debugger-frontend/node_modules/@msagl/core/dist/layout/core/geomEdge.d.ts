import { GeomNode } from './geomNode';
import { Edge, ToAncestorEnum } from './../../structs/edge';
import { GeomObject } from './geomObject';
import { Rectangle } from './../../math/geometry/rectangle';
import { ICurve } from './../../math/geometry/icurve';
import { SmoothedPolyline } from './../../math/geometry/smoothedPolyline';
import { GeomLabel } from './geomLabel';
import { PlaneTransformation } from '../../math/geometry/planeTransformation';
import { Port } from './port';
import { Point } from '../../math/geometry/point';
import { Arrowhead } from './arrowhead';
import { Entity } from '../../structs/entity';
export declare class GeomEdge extends GeomObject {
    static getGeom(e: Entity): GeomEdge;
    curve: ICurve;
    sourceArrowhead: Arrowhead;
    targetArrowhead: Arrowhead;
    lineWidth: number;
    sourcePort: Port;
    targetPort: Port;
    smoothedPolyline: SmoothedPolyline;
    /** clones but does not bind to the entity */
    clone(): GeomObject;
    get label(): GeomLabel;
    set label(value: GeomLabel);
    RaiseLayoutChangeEvent(delta: Point): void;
    requireRouting(): void;
    translate(delta: Point): void;
    GetMaxArrowheadLength(): number;
    transform(matrix: PlaneTransformation): void;
    get edge(): Edge;
    get source(): GeomNode;
    /** iterates over the source arrowhead corner points */
    sourceArrowheadPoints(angle: number): IterableIterator<Point>;
    /** iterates over the target arrowhead corner points */
    targetArrowheadPoints(angle: number): IterableIterator<Point>;
    get boundingBox(): Rectangle;
    isInterGraphEdge(): boolean;
    get target(): GeomNode;
    constructor(edge: Edge);
    toString(): string;
    static RouteSelfEdge(boundaryCurve: ICurve, howMuchToStickOut: number, t: {
        smoothedPolyline: SmoothedPolyline;
    }): ICurve;
    underCollapsedGraph(): boolean;
    EdgeToAncestor(): ToAncestorEnum;
    /** this field is used for editing */
    labelAttachmentParameter: number;
}
