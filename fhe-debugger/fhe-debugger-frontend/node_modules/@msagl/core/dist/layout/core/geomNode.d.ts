import { ICurve, ICurveJSON } from './../../math/geometry/icurve';
import { Rectangle } from './../../math/geometry/rectangle';
import { Point } from './../../math/geometry/point';
import { PlaneTransformation } from './../../math/geometry/planeTransformation';
import { Node } from './../../structs/node';
import { GeomObject } from './geomObject';
import { GeomEdge } from './geomEdge';
import { Entity } from '../../structs/entity';
export declare type GeomNodeJSON = {
    boundaryCurve: ICurveJSON;
    padding: number;
};
export declare class GeomNode extends GeomObject {
    /** clones but does not bind to the entity */
    clone(): GeomObject;
    translate(delta: Point): void;
    toJSON(): GeomNodeJSON;
    static minHeight: number;
    static minWidth: number;
    get node(): Node;
    padding: number;
    private _boundaryCurve;
    get boundaryCurve(): ICurve;
    set boundaryCurve(value: ICurve);
    get id(): string;
    toString(): string;
    static mkNode(curve: ICurve, node: Node): GeomNode;
    get center(): Point;
    set center(value: Point);
    private fitBoundaryCurveToTarget;
    static getGeom(attrCont: Entity): GeomNode;
    inEdges(): IterableIterator<GeomEdge>;
    outEdges(): IterableIterator<GeomEdge>;
    selfEdges(): IterableIterator<GeomEdge>;
    /** creates a new rectangle equal to the padded  */
    get boundingBoxWithPadding(): Rectangle;
    get boundingBox(): Rectangle;
    set boundingBox(value: Rectangle);
    get width(): number;
    get height(): number;
    transform(t: PlaneTransformation): void;
    underCollapsedGraph(): boolean;
    getAncestors(): IterableIterator<GeomNode>;
}
