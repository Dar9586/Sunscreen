//  Wrapper for GeomNode node to add force and velocity vectors
import { Point } from '../../math/geometry';
import { AlgorithmData } from '../../structs/algorithmData';
export function getFiNode(filNode) {
    const algData = AlgorithmData.getAlgData(filNode.node);
    if (algData == null)
        return null;
    return algData.data;
}
export class FiNode {
    constructor(index, mNode) {
        this.force = new Point(0, 0);
        this.stayWeight = 1;
        this.index = index;
        this.geomNode = mNode;
        this.ResetBounds();
    }
    //  local cache of node center (which in the MSAGL node has to be computed from the bounding box)
    get Center() {
        return this.center;
    }
    set Center(value) {
        this.geomNode.center = value;
        this.center = value;
    }
    //  When mNode's bounds change we need to update our local
    //  previous and current center to MSAGL node center
    //  and update width and height
    ResetBounds() {
        this.previousCenter = this.geomNode.center;
        this.center = this.geomNode.center;
        this.Width = this.geomNode.width;
        this.Height = this.geomNode.height;
    }
    //  Update the current X or Y coordinate of the node center from the result of a solve
    ToString() {
        return 'FINode(' + (this.index + ('):' + this.geomNode));
    }
}
//# sourceMappingURL=fiNode.js.map