import { EdgeRoutingSettings } from '../../routing/EdgeRoutingSettings';
import { CancelToken } from '../../utils/cancelToken';
import { CommonLayoutSettings } from '../commonLayoutSettings';
import { GeomGraph } from '../core/geomGraph';
import { ILayoutSettings } from '../iLayoutSettings';
import { IPsepCola } from './iPsepCola';
export declare class IPsepColaSetting implements ILayoutSettings {
    get edgeRoutingSettings(): EdgeRoutingSettings;
    set edgeRoutingSettings(value: EdgeRoutingSettings);
    commonSettings: CommonLayoutSettings;
    get PackingAspectRatio(): number;
    set PackingAspectRatio(value: number);
    get NodeSeparation(): number;
    set NodeSeparation(value: number);
    maxIterations: number;
    clusterMargin: number;
    get MaxIterations(): number;
    set MaxIterations(value: number);
    minorIterations: number;
    get MinorIterations(): number;
    set MinorIterations(value: number);
    iterations: number;
    get Iterations(): number;
    set Iterations(value: number);
    projectionIterations: number;
    get ProjectionIterations(): number;
    set ProjectionIterations(value: number);
    approximateRepulsion: boolean;
    get ApproximateRepulsion(): boolean;
    set ApproximateRepulsion(value: boolean);
    RungeKuttaIntegration: boolean;
    initialStepSize: number;
    get InitialStepSize(): number;
    set InitialStepSize(value: number);
    decay: number;
    get Decay(): number;
    set Decay(value: number);
    private friction;
    get Friction(): number;
    set Friction(value: number);
    repulsiveForceConstant: number;
    get RepulsiveForceConstant(): number;
    set RepulsiveForceConstant(value: number);
    attractiveForceConstant: number;
    get AttractiveForceConstant(): number;
    set AttractiveForceConstant(value: number);
    gravity: number;
    get GravityConstant(): number;
    set GravityConstant(value: number);
    interComponentForces: boolean;
    get InterComponentForces(): boolean;
    set InterComponentForces(value: boolean);
    applyForces: boolean;
    get ApplyForces(): boolean;
    set ApplyForces(value: boolean);
    algorithm: IPsepCola;
    constructor();
    ResetLayout(): void;
    /**   reset iterations and convergence status*/
    Unconverge(): void;
    InitializeLayoutGN(graph: GeomGraph, initialConstraintLevel: number): void;
    InitializeLayout(graph: GeomGraph, initialConstraintLevel: number): void;
    Uninitialize(): void;
    get IsInitialized(): boolean;
    IncrementalRunG(graph: GeomGraph): void;
    private SetupIncrementalRun;
    IncrementalRunGF(graph: GeomGraph): void;
    IncrementalRun(cancelToken: CancelToken, graph: GeomGraph): void;
    Clone(): IPsepColaSetting;
    AvoidOverlaps: boolean;
    RespectEdgePorts: boolean;
    RouteEdges: boolean;
    approximateRouting: boolean;
    get ApproximateRouting(): boolean;
    set ApproximateRouting(value: boolean);
    logScaleEdgeForces: boolean;
    get LogScaleEdgeForces(): boolean;
    set LogScaleEdgeForces(value: boolean);
    displacementThreshold: number;
    get DisplacementThreshold(): number;
    set DisplacementThreshold(value: number);
    converged: boolean;
    get Converged(): boolean;
    set Converged(value: boolean);
    get PercentDone(): number;
    get IsDone(): boolean;
    get Energy(): number;
    EdgeRoutesUpToDate: boolean;
    maxConstraintLevel: number;
    get MaxConstraintLevel(): number;
    set MaxConstraintLevel(value: number);
    minConstraintLevel: number;
    get MinConstraintLevel(): number;
    set MinConstraintLevel(value: number);
    getCurrentConstraintLevel(): number;
    setCurrentConstraintLevel(value: number): void;
    attractiveInterClusterForceConstant: number;
    get AttractiveInterClusterForceConstant(): number;
    set AttractiveInterClusterForceConstant(value: number);
    static ctorClone(previousSettings: IPsepColaSetting): IPsepColaSetting;
    clusterGravity: number;
    get ClusterGravity(): number;
    set ClusterGravity(value: number);
    static CreateFastIncrementalLayoutSettings(): IPsepColaSetting;
}
