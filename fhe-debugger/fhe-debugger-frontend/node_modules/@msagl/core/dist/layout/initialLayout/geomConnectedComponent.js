import { Rectangle } from '../../math/geometry';
import { GeomEdge, GeomGraph, GeomNode, Graph } from '../..';
import { pumpTheBoxToTheGraph } from '../core/geomGraph';
export class GeomConnectedComponent {
    constructor(topNodes) {
        this.topNodes = topNodes;
    }
    get nodesBreadthFirst() {
        return this.nodesBreadthFirst_();
    }
    *nodesBreadthFirst_() {
        for (const n of this.topNodes) {
            yield GeomNode.getGeom(n);
            if (n instanceof Graph) {
                for (const nn of n.nodesBreadthFirst) {
                    yield GeomNode.getGeom(nn);
                }
            }
        }
    }
    get Clusters() {
        return this.clusters();
    }
    *clusters() {
        for (const n of this.topNodes)
            if (n instanceof Graph)
                yield GeomGraph.getGeom(n);
    }
    get subgraphsDepthFirst() {
        return this.subgraphsDepthFirst_();
    }
    *subgraphsDepthFirst_() {
        for (const n of this.topNodes) {
            if (n instanceof Graph) {
                const gn = GeomGraph.getGeom(n);
                yield* gn.subgraphsDepthFirst;
                yield gn;
            }
        }
    }
    get shallowEdges() {
        return this.edges_();
    }
    *edges_() {
        for (const n of this.topNodes) {
            for (const e of n.outEdges)
                yield GeomEdge.getGeom(e);
            for (const e of n.selfEdges)
                yield GeomEdge.getGeom(e);
        }
    }
    get shallowNodes() {
        return this.shallowNodes_();
    }
    *shallowNodes_() {
        for (const n of this.topNodes)
            yield GeomNode.getGeom(n);
    }
    pumpTheBoxToTheGraphWithMargins() {
        const t = { b: Rectangle.mkEmpty() };
        pumpTheBoxToTheGraph(this, t);
        return (this.boundingBox = t.b);
    }
    get shallowNodeCount() {
        return this.topNodes.length;
    }
    translate(delta) {
        if (this.boundingBox)
            this.boundingBox.center = this.boundingBox.center.add(delta);
        for (const n of this.topNodes) {
            const gn = GeomNode.getGeom(n);
            gn.translate(delta);
        }
        // todo :test the edges!
    }
}
//# sourceMappingURL=geomConnectedComponent.js.map