export class LayoutAlgorithmHelpers {
    //  Linearly interpolates a result between the minResult and the maxResult based on the location of the value between the lowerThreshold and the upperThreshold.
    //  <returns>The linearly interpolated result.  Between minResult and maxResult, inclusive.</returns>
    static LinearInterpolation(value, lowerThreshold, upperThreshold, minResult, maxResult) {
        if (value < lowerThreshold) {
            return minResult;
        }
        if (value > upperThreshold) {
            return maxResult;
        }
        const fraction = (value - lowerThreshold) / (upperThreshold - lowerThreshold);
        return minResult + (fraction * (maxResult - minResult));
    }
    //  Negatively linearly interpolates a result between the minResult and the maxResult based on the location of the value between the lowerThreshold and the upperThreshold.
    //  <returns>The linearly interpolated result.  Between minResult and maxResult, inclusive.</returns>
    static NegativeLinearInterpolation(value, lowerThreshold, upperThreshold, minResult, maxResult) {
        if (value < lowerThreshold) {
            return maxResult;
        }
        if (value > upperThreshold) {
            return minResult;
        }
        const fraction = (value - lowerThreshold) / (upperThreshold - lowerThreshold);
        return minResult + ((1 - fraction) * (maxResult - minResult));
    }
}
//# sourceMappingURL=layoutAlgorithmHelpers.js.map