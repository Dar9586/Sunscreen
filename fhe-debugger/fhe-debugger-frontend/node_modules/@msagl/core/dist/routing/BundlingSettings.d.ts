import { GeomEdge } from '../layout/core/geomEdge';
export declare type BundlingSettingsJSON = {
    capacityOverflowCoefficient?: number;
    RotateBundles?: boolean;
    MaxHubRadius?: number;
    MinHubRadius?: number;
    CreateUnderlyingPolyline?: boolean;
    pathLengthImportance?: number;
    inkImportance?: number;
    edgeSeparation?: number;
    _edgeWidthShrinkCoeff?: number;
    useCubicBezierSegmentsInsideOfHubs?: boolean;
    angleThreshold?: number;
    hubRepulsionImportance?: number;
    bundleRepulsionImportance?: number;
    minimalRatioOfGoodCdtEdges?: number;
    highestQuality?: boolean;
    KeepOverlaps?: boolean;
    StopAfterShortestPaths?: boolean;
};
export declare class BundlingSettings {
    toJSON(): BundlingSettingsJSON;
    static createFromJSON(s: BundlingSettingsJSON): BundlingSettings;
    static DefaultCapacityOverflowCoefficientMultiplier: number;
    capacityOverflowCoefficient: number;
    RotateBundles: boolean;
    get CapacityOverflowCoefficient(): number;
    set CapacityOverflowCoefficient(value: number);
    MaxHubRadius: number;
    MinHubRadius: number;
    CreateUnderlyingPolyline: boolean;
    static DefaultPathLengthImportance: number;
    pathLengthImportance: number;
    get PathLengthImportance(): number;
    set PathLengthImportance(value: number);
    static DefaultInkImportance: number;
    inkImportance: number;
    get InkImportance(): number;
    set InkImportance(value: number);
    edgeSeparation: number;
    /** default edge separation */
    static DefaultEdgeSeparation: number;
    /** Separation between the neighbor edges within a bundle */
    get EdgeSeparation(): number;
    set EdgeSeparation(value: number);
    /** this could be different from bundlingSetting.EdgeSeparation
     *    and could be a negative number
     */
    private _edgeWidthShrinkCoeff;
    get edgeWidthShrinkCoeff(): number;
    set edgeWidthShrinkCoeff(value: number);
    ActualEdgeWidth(e: GeomEdge, coeff?: number): number;
    useCubicBezierSegmentsInsideOfHubs: boolean;
    get UseCubicBezierSegmentsInsideOfHubs(): boolean;
    set UseCubicBezierSegmentsInsideOfHubs(value: boolean);
    angleThreshold: number;
    get AngleThreshold(): number;
    set AngleThreshold(value: number);
    hubRepulsionImportance: number;
    get HubRepulsionImportance(): number;
    set HubRepulsionImportance(value: number);
    bundleRepulsionImportance: number;
    get BundleRepulsionImportance(): number;
    set BundleRepulsionImportance(value: number);
    minimalRatioOfGoodCdtEdges: number;
    get MinimalRatioOfGoodCdtEdges(): number;
    set MinimalRatioOfGoodCdtEdges(value: number);
    highestQuality: boolean;
    get HighestQuality(): boolean;
    set HighestQuality(value: boolean);
    KeepOverlaps: boolean;
    StopAfterShortestPaths: boolean;
}
