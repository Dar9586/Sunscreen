/**
 * Entity is an attribute container with a parent.
 * It also keeps an array of event functions.
 */
export class Entity {
    constructor() {
        /** keeps entity attributes: for example, drawing attributes, geometry attributes, etc */
        this.attrs = [];
        this._parent = null;
    }
    /** adds an event function */
    addEvent(event) {
        this.events.push(event);
    }
    /** trying to remove an event function */
    removeEvent(event) {
        const index = this.events.indexOf(event);
        if (index >= 0) {
            this.events = this.events.splice(index, 1);
        }
    }
    /** raises all available events on the given data */
    raiseEvents(data) {
        this.events.forEach((event) => event(data));
    }
    /** removes all the attributes form the entity */
    clearAttr() {
        this.attrs = [];
    }
    /** sets the attribute at the given position */
    setAttr(position, val) {
        this.attrs[position] = val;
    }
    /** gets the attribute at the given position */
    getAttr(position) {
        return this.attrs[position];
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    *getAncestors() {
        let p = this.parent;
        while (p != null) {
            yield p;
            p = p.parent;
        }
    }
    /**  Determines if this node is a descendant of the given graph.*/
    isDescendantOf(graph) {
        for (const p of this.getAncestors()) {
            if (p === graph)
                return true;
        }
        return false;
    }
}
//# sourceMappingURL=entity.js.map