import { Entity } from './entity';
import { Label } from './label';
import { Node } from './node';
/** characterize edge if it connects an node and its ancestor */
export declare enum ToAncestorEnum {
    /** the source and the target are siblings */
    None = 0,
    /** the source is an ancestor of the target */
    FromAncestor = 1,
    /** the target is an ancestor of the source */
    ToAncestor = 2
}
export declare class Edge extends Entity {
    label: Label;
    source: Node;
    target: Node;
    constructor(s: Node, t: Node);
    add(): void;
    remove(): void;
    toString(): string;
    isInterGraphEdge(): boolean;
    EdgeToAncestor(): ToAncestorEnum;
}
