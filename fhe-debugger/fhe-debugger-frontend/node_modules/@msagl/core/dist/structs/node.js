import { Entity } from './entity';
/** Represent a node of a graph: has id, which is a string, and sets of in/out/self edges */
export class Node extends Entity {
    constructor(id) {
        super();
        this.inEdges = new Set();
        this.outEdges = new Set();
        this.selfEdges = new Set();
        // Assert.assert(id != null && id.toString() === id)
        this.id = id;
    }
    removeOutEdge(edge) {
        this.outEdges.delete(edge);
    }
    removeInEdge(edge) {
        this.inEdges.delete(edge);
    }
    /** the unique, in the parent graph, id of the node */
    get id() {
        return this._id;
    }
    set id(value) {
        /*Assert.assert(value != null)*/
        this._id = value;
    }
    toString() {
        return this.id;
    }
    *_edges() {
        for (const e of this.inEdges)
            yield e;
        for (const e of this.outEdges)
            yield e;
        for (const e of this.selfEdges)
            yield e;
    }
    get edges() {
        return this._edges();
    }
    get outDegree() {
        return this.outEdges.size;
    }
    get inDegree() {
        return this.inEdges.size;
    }
    get selfDegree() {
        return this.selfEdges.size;
    }
    get degree() {
        return this.outDegree + this.inDegree + this.selfDegree;
    }
}
//# sourceMappingURL=node.js.map