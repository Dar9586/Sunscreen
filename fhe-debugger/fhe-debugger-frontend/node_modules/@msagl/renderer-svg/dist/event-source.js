function addEventListener(type, listener, registry) {
    registry[type] = registry[type] || [];
    if (registry[type].indexOf(listener) < 0) {
        // Does not exist
        registry[type].push(listener);
    }
}
function removeEventListener(type, listener, registry) {
    if (registry[type]) {
        const index = registry[type].indexOf(listener);
        if (index >= 0) {
            registry[type].splice(index, 1);
        }
    }
}
/**
 * An event source can emit events and register event listeners
 */
export default class EventSource {
    constructor() {
        this._listeners = {};
        this._onceListeners = {};
    }
    /**
     * Adds a listener to a event type.
     */
    on(type, listener) {
        addEventListener(type, listener, this._listeners);
    }
    /**
     * Adds a listener that will be called only once to a event type.
     */
    once(type, listener) {
        addEventListener(type, listener, this._onceListeners);
    }
    /**
     * Removes a previously registered event listener.
     */
    off(type, listener) {
        removeEventListener(type, listener, this._listeners);
        removeEventListener(type, listener, this._onceListeners);
    }
    emit(eventOrType) {
        var _a, _b;
        let event;
        if (typeof eventOrType === 'string') {
            event = { type: eventOrType };
        }
        else {
            event = eventOrType;
        }
        const type = event.type;
        if (!this._listens(type)) {
            return;
        }
        event.target = this;
        // adding or removing listeners inside other listeners may cause an infinite loop
        const listeners = ((_a = this._listeners[type]) === null || _a === void 0 ? void 0 : _a.slice()) || [];
        for (const listener of listeners) {
            listener.call(this, event);
        }
        const onceListeners = ((_b = this._onceListeners[type]) === null || _b === void 0 ? void 0 : _b.slice()) || [];
        for (const listener of onceListeners) {
            removeEventListener(type, listener, this._onceListeners);
            listener.call(this, event);
        }
    }
    /**
     * Returns true if we have a listener for the event type.
     */
    _listens(type) {
        return ((this._listeners[type] && this._listeners[type].length > 0) || (this._onceListeners[type] && this._onceListeners[type].length > 0));
    }
}
//# sourceMappingURL=event-source.js.map