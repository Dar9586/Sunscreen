{"ast":null,"code":"var _jsxFileName = \"/home/bryanli/Sunscreen/Sunscreen/fhe-debugger/fhe-debugger-frontend/src/App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useCallback, useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport ReactSplit, { SplitDirection } from '@devbookhq/splitter';\nimport './App.css';\nimport { UberGraph } from './UberGraph';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodeBlock({\n  code,\n  onClickHandler,\n  selectedLine\n}) {\n  _s();\n  const onSelectLine = useCallback(lineNumber => onClickHandler(lineNumber), [onClickHandler]);\n  const lineProps = useCallback(lineNumber => {\n    return lineNumber !== selectedLine ? {\n      onClick: () => onSelectLine(lineNumber)\n    } : {\n      onClick: () => onSelectLine(lineNumber),\n      style: {\n        backgroundColor: \"saddlebrown\"\n      }\n    };\n  }, [onSelectLine, selectedLine]);\n  return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n    language: \"rust\",\n    style: atomDark,\n    showLineNumbers: true,\n    wrapLines: true,\n    useInlineStyles: true,\n    lineProps: lineProps,\n    lineNumberStyle: {\n      minWidth: 10\n    },\n    children: code\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(CodeBlock, \"38FKPd8tTmyJnppwXN9lqHaFU0o=\");\n_c = CodeBlock;\n;\nconst exampleUberGraph = {\n  nodes: [{\n    id: 1,\n    title: '2',\n    type: 'empty'\n  }, {\n    id: 2,\n    title: '3',\n    type: 'empty'\n  }, {\n    id: 3,\n    title: '+',\n    type: 'empty'\n  }, {\n    id: 4,\n    title: 'square',\n    type: 'empty',\n    test: 27183912\n  }],\n  edges: [{\n    source: 1,\n    target: 3,\n    directed: true,\n    arrowhead: 'normal'\n  }, {\n    source: 2,\n    target: 3,\n    directed: true,\n    arrowhead: 'normal'\n  }, {\n    source: 3,\n    target: 4,\n    directed: true,\n    arrowhead: 'normal'\n  }]\n};\nconst exampleCode = `fn sudoku_proof<F: BackendField>(\n  #[constant] constraints: [[NativeField<F>; 9]; 9],\n  board: [[NativeField<F>; 9]; 9],\n) {\n  fn assert_unique_numbers<F: BackendField>(arr: [ProgramNode<NativeField<F>>; 9]) {\n      for i in 1..=9 {\n          let mut circuit = NativeField::<F>::from(1).into_program_node();\n          for a in arr {\n              circuit = circuit * (NativeField::<F>::from(i).into_program_node() - a);\n          }\n          circuit.constrain_eq(NativeField::<F>::from(0));\n      }\n  }\n  // Proves that the board matches up with the puzzle where applicable\n  let zero = NativeField::<F>::from(0).into_program_node();\n\n  for i in 0..9 {\n      for j in 0..9 {\n          let square = board[i][j].into_program_node();\n          let constraint = constraints[i][j].into_program_node();\n          (constraint * (constraint - square)).constrain_eq(zero);\n      }\n  }\n\n  // Checks rows contain every number from 1 to 9\n  for row in board {\n      assert_unique_numbers(row);\n  }\n\n  // Checks columns contain each number from 1 to 9\n  for col in 0..9 {\n      let column = board.map(|r| r[col]);\n      assert_unique_numbers(column);\n  }\n\n  // Checks squares contain each number from 1 to 9\n  for i in 0..3 {\n      for j in 0..3 {\n          let rows = &board[(i * 3)..(i * 3 + 3)];\n\n          let square = rows.iter().map(|s| &s[(j * 3)..(j * 3 + 3)]);\n\n          let flattened_sq: [ProgramNode<NativeField<F>>; 9] = square\n              .flatten()\n              .copied()\n              .collect::<Vec<_>>()\n              .try_into()\n              .unwrap_or([zero; 9]);\n\n          assert_unique_numbers(flattened_sq);\n      }\n  }\n}`;\nconst dataToGraph = (data, incRelin) => {\n  data = data.graph.graph;\n  var nodes = [];\n  var edges = [];\n  if (incRelin) {\n    for (let i = 0; i < data.nodes.length; ++i) {\n      if (data.nodes[i].operation.constructor == Object && data.nodes[i].operation.hasOwnProperty('InputCiphertext')) {\n        nodes.push({\n          id: i,\n          title: JSON.stringify(data.nodes[i].operation.InputCiphertext),\n          type: 'input'\n        });\n      } else {\n        nodes.push({\n          id: i,\n          title: JSON.stringify(data.nodes[i].operation),\n          type: 'empty'\n        });\n      }\n    }\n    for (let i = 0; i < data.edges.length; ++i) {\n      edges.push({\n        source: data.edges[i][0],\n        target: data.edges[i][1],\n        type: data.edges[i][2]\n      });\n    }\n  } else {\n    for (let i = 0; i < data.nodes.length; ++i) {\n      if (data.nodes[i].operation.constructor == Object && data.nodes[i].operation.hasOwnProperty('InputCiphertext')) {\n        nodes.push({\n          id: i,\n          title: JSON.stringify(data.nodes[i].operation.InputCiphertext),\n          type: 'input'\n        });\n      } else if (data.nodes[i].operation == \"Relinearize\") {} else {\n        nodes.push({\n          id: i,\n          title: JSON.stringify(data.nodes[i].operation),\n          type: 'empty'\n        });\n      }\n    }\n    var relinSources = Array(5);\n    for (let i = 0; i < data.edges.length; ++i) {\n      if (data.nodes[data.edges[i][1]].operation == \"Relinearize\") {\n        relinSources[data.edges[i][1]] = data.edges[i][0];\n      } else if (data.nodes[data.edges[i][0]].operation != \"Relinearize\") {\n        edges.push({\n          source: data.edges[i][0],\n          target: data.edges[i][1],\n          type: data.edges[i][2]\n        });\n      }\n    }\n    for (let i = 0; i < data.edges.length; ++i) {\n      if (data.nodes[data.edges[i][0]].operation == \"Relinearize\") {\n        edges.push({\n          source: relinSources[data.edges[i][0]],\n          target: data.edges[i][1],\n          type: data.edges[i][2]\n        });\n      }\n    }\n  }\n  return {\n    nodes: nodes,\n    edges: edges\n  };\n};\nconst App = () => {\n  _s2();\n  var _selected$nodes;\n  const sampleData = JSON.parse(`{\"graph\":{\"graph\":{\"nodes\":[{\"operation\":{\"InputCiphertext\":0}},{\"operation\":{\"InputCiphertext\":1}},{\"operation\":{\"InputCiphertext\":2}},{\"operation\":{\"InputCiphertext\":3}},{\"operation\":\"Multiply\"},{\"operation\":\"Multiply\"},{\"operation\":\"Multiply\"},{\"operation\":\"Add\"},{\"operation\":\"OutputCiphertext\"},{\"operation\":\"OutputCiphertext\"},{\"operation\":\"Relinearize\"},{\"operation\":\"Relinearize\"},{\"operation\":\"Relinearize\"}],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[0,4,\"Left\"],[3,4,\"Right\"],[1,5,\"Left\"],[2,5,\"Right\"],[1,6,\"Left\"],[3,6,\"Right\"],[12,7,\"Left\"],[10,7,\"Right\"],[7,8,\"Unary\"],[11,9,\"Unary\"],[5,10,\"Unary\"],[6,11,\"Unary\"],[4,12,\"Unary\"]]}},\"data\":\"Bfv\"}`);\n  const exGraph = dataToGraph(sampleData, true);\n  const [selectedLine, setLine] = useState(0);\n  const [vertSize, setVertSize] = useState();\n  const [horSize, setHorSize] = useState();\n  const [currGraph, setGraph] = useState(exGraph);\n  const [selected, select] = useState(null);\n  const updateLine = useCallback(lineNumber => {\n    setLine(lineNumber);\n    const graph = {\n      nodes: [{\n        id: 1,\n        title: `line ${lineNumber}`,\n        type: 'empty',\n        x: -10,\n        y: 0\n      }, {\n        id: 2,\n        title: `test_func`,\n        type: 'problematic',\n        x: 0,\n        y: 0\n      }],\n      edges: [{\n        source: 1,\n        target: 2,\n        directed: true,\n        arrowhead: 'normal'\n      }]\n    };\n    setGraph(lineNumber !== 1 ? graph : exGraph);\n  }, [setLine, setGraph]);\n  const updateSelection = useCallback((selection, e) => {\n    var _selection$nodes;\n    select(selection);\n    console.log((_selection$nodes = selection.nodes) === null || _selection$nodes === void 0 ? void 0 : _selection$nodes.values().next().value);\n  }, [select]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"splits\",\n    children: /*#__PURE__*/_jsxDEV(ReactSplit, {\n      direction: SplitDirection.Horizontal,\n      onResizeFinished: (p, n) => setHorSize(n),\n      initialSizes: horSize,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pane\",\n        children: /*#__PURE__*/_jsxDEV(ReactSplit, {\n          direction: SplitDirection.Vertical,\n          onResizeFinished: (p, n) => setVertSize(n),\n          initialSizes: vertSize,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pane\",\n            children: /*#__PURE__*/_jsxDEV(CodeBlock, {\n              code: exampleCode,\n              onClickHandler: updateLine,\n              selectedLine: selectedLine\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 35\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pane\",\n            children: /*#__PURE__*/_jsxDEV(NodeInfo, {\n              info: selected === null || selected === void 0 ? void 0 : (_selected$nodes = selected.nodes) === null || _selected$nodes === void 0 ? void 0 : _selected$nodes.values().next().value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 35\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pane\",\n        children: /*#__PURE__*/_jsxDEV(UberGraph, {\n          graph: currGraph,\n          onSelect: updateSelection,\n          selected: selected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 31\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_s2(App, \"AnOu5+L4s3E5AQjY0OFgjjmovHw=\");\n_c2 = App;\nfunction NodeInfo({\n  info\n}) {\n  if (info !== null) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: JSON.stringify(info)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: JSON.stringify(info)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 10\n  }, this);\n}\n_c3 = NodeInfo;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CodeBlock\");\n$RefreshReg$(_c2, \"App\");\n$RefreshReg$(_c3, \"NodeInfo\");","map":{"version":3,"names":["React","useCallback","useState","Prism","SyntaxHighlighter","atomDark","ReactSplit","SplitDirection","UberGraph","jsxDEV","_jsxDEV","CodeBlock","code","onClickHandler","selectedLine","_s","onSelectLine","lineNumber","lineProps","onClick","style","backgroundColor","language","showLineNumbers","wrapLines","useInlineStyles","lineNumberStyle","minWidth","children","fileName","_jsxFileName","columnNumber","_c","exampleUberGraph","nodes","id","title","type","test","edges","source","target","directed","arrowhead","exampleCode","dataToGraph","data","incRelin","graph","i","length","operation","constructor","Object","hasOwnProperty","push","JSON","stringify","InputCiphertext","relinSources","Array","App","_s2","_selected$nodes","sampleData","parse","exGraph","setLine","vertSize","setVertSize","horSize","setHorSize","currGraph","setGraph","selected","select","updateLine","x","y","updateSelection","selection","e","_selection$nodes","console","log","values","next","value","className","direction","Horizontal","onResizeFinished","p","n","initialSizes","Vertical","NodeInfo","info","onSelect","_c2","_c3","$RefreshReg$"],"sources":["/home/bryanli/Sunscreen/Sunscreen/fhe-debugger/fhe-debugger-frontend/src/App.tsx"],"sourcesContent":["import React, { useCallback,  useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport ReactSplit, { SplitDirection } from '@devbookhq/splitter'\nimport './App.css'\n\nimport { UberGraph } from './UberGraph';\nimport { SelectionT } from 'react-digraph';\n\ninterface CodeBlockProps {\n  code: string;\n  onClickHandler: (number: number) => void;\n  selectedLine: number;\n}\n\nfunction CodeBlock({ code, onClickHandler, selectedLine }: CodeBlockProps) {\n  const onSelectLine = useCallback(\n    (lineNumber: number) => onClickHandler(lineNumber),\n    [onClickHandler]\n  )\n\n  const lineProps = useCallback((lineNumber: number) => {\n    return lineNumber !== selectedLine ?\n      {\n        onClick: () => onSelectLine(lineNumber),\n      } :\n      {\n        onClick: () => onSelectLine(lineNumber),\n        style: {backgroundColor: \"saddlebrown\"}\n      }\n  }, [onSelectLine, selectedLine]);\n\n  return (\n    <SyntaxHighlighter\n      language=\"rust\"\n      style={atomDark}\n      showLineNumbers={true}\n      wrapLines={true}\n      useInlineStyles={true}\n      lineProps={lineProps}\n      lineNumberStyle={{minWidth: 10}}\n    >\n      {code}\n    </SyntaxHighlighter>\n  );\n};\n\nconst exampleUberGraph = {\n  nodes: [\n      { id: 1, title: '2', type: 'empty' },\n      { id: 2, title: '3', type: 'empty'  },\n      { id: 3, title: '+', type: 'empty'  },\n      { id: 4, title: 'square', type: 'empty', test: 27183912  },\n  ],\n  edges: [\n    { source: 1, target: 3, directed: true, arrowhead: 'normal' },\n    { source: 2, target: 3, directed: true, arrowhead: 'normal' },\n    { source: 3, target: 4, directed: true, arrowhead: 'normal' },\n  ]\n}\n\nconst exampleCode: string = `fn sudoku_proof<F: BackendField>(\n  #[constant] constraints: [[NativeField<F>; 9]; 9],\n  board: [[NativeField<F>; 9]; 9],\n) {\n  fn assert_unique_numbers<F: BackendField>(arr: [ProgramNode<NativeField<F>>; 9]) {\n      for i in 1..=9 {\n          let mut circuit = NativeField::<F>::from(1).into_program_node();\n          for a in arr {\n              circuit = circuit * (NativeField::<F>::from(i).into_program_node() - a);\n          }\n          circuit.constrain_eq(NativeField::<F>::from(0));\n      }\n  }\n  // Proves that the board matches up with the puzzle where applicable\n  let zero = NativeField::<F>::from(0).into_program_node();\n\n  for i in 0..9 {\n      for j in 0..9 {\n          let square = board[i][j].into_program_node();\n          let constraint = constraints[i][j].into_program_node();\n          (constraint * (constraint - square)).constrain_eq(zero);\n      }\n  }\n\n  // Checks rows contain every number from 1 to 9\n  for row in board {\n      assert_unique_numbers(row);\n  }\n\n  // Checks columns contain each number from 1 to 9\n  for col in 0..9 {\n      let column = board.map(|r| r[col]);\n      assert_unique_numbers(column);\n  }\n\n  // Checks squares contain each number from 1 to 9\n  for i in 0..3 {\n      for j in 0..3 {\n          let rows = &board[(i * 3)..(i * 3 + 3)];\n\n          let square = rows.iter().map(|s| &s[(j * 3)..(j * 3 + 3)]);\n\n          let flattened_sq: [ProgramNode<NativeField<F>>; 9] = square\n              .flatten()\n              .copied()\n              .collect::<Vec<_>>()\n              .try_into()\n              .unwrap_or([zero; 9]);\n\n          assert_unique_numbers(flattened_sq);\n      }\n  }\n}`\n\nconst dataToGraph = (data: { graph: { graph: any; }; nodes: string | any[]; edges: string | any[]; }, incRelin: boolean) => {\n  \n  data = data.graph.graph\n  var nodes: any[] = [];\n  var edges: any[] = [];\n  if (incRelin) {\n    for (let i: number = 0; i < data.nodes.length; ++i) {\n      if (data.nodes[i].operation.constructor == Object && data.nodes[i].operation.hasOwnProperty('InputCiphertext')) {\n        nodes.push({id: i, title: JSON.stringify(data.nodes[i].operation.InputCiphertext), type: 'input'})\n      } else {\n        nodes.push({id: i, title: JSON.stringify(data.nodes[i].operation), type: 'empty'})\n      }\n    }\n    for (let i: number = 0; i < data.edges.length; ++i) {\n      edges.push({source: data.edges[i][0], target: data.edges[i][1], type: data.edges[i][2]})\n    }\n  } else {\n    for (let i: number = 0; i < data.nodes.length; ++i) {\n      if (data.nodes[i].operation.constructor == Object && data.nodes[i].operation.hasOwnProperty('InputCiphertext')) {\n        nodes.push({id: i, title: JSON.stringify(data.nodes[i].operation.InputCiphertext), type: 'input'})\n      } else if (data.nodes[i].operation == \"Relinearize\") {\n\n      } else {\n        nodes.push({id: i, title: JSON.stringify(data.nodes[i].operation), type: 'empty'})\n      }\n    }\n    var relinSources = Array<number>(5)\n\n    for (let i: number = 0; i < data.edges.length; ++i) {\n      if (data.nodes[data.edges[i][1]].operation == \"Relinearize\") {\n        relinSources[data.edges[i][1]] = data.edges[i][0];\n      } else if (data.nodes[data.edges[i][0]].operation != \"Relinearize\") {\n        edges.push({source: data.edges[i][0], target: data.edges[i][1], type: data.edges[i][2]})\n      } \n    }\n    for (let i: number = 0; i < data.edges.length; ++i) {\n      if (data.nodes[data.edges[i][0]].operation == \"Relinearize\") {\n        edges.push({source: relinSources[data.edges[i][0]], target: data.edges[i][1], type: data.edges[i][2]})\n      } \n    }\n  }\n  return {nodes: nodes, edges: edges}\n}\n\n\nconst App = () => {\n  \n  const sampleData = JSON.parse(`{\"graph\":{\"graph\":{\"nodes\":[{\"operation\":{\"InputCiphertext\":0}},{\"operation\":{\"InputCiphertext\":1}},{\"operation\":{\"InputCiphertext\":2}},{\"operation\":{\"InputCiphertext\":3}},{\"operation\":\"Multiply\"},{\"operation\":\"Multiply\"},{\"operation\":\"Multiply\"},{\"operation\":\"Add\"},{\"operation\":\"OutputCiphertext\"},{\"operation\":\"OutputCiphertext\"},{\"operation\":\"Relinearize\"},{\"operation\":\"Relinearize\"},{\"operation\":\"Relinearize\"}],\"node_holes\":[],\"edge_property\":\"directed\",\"edges\":[[0,4,\"Left\"],[3,4,\"Right\"],[1,5,\"Left\"],[2,5,\"Right\"],[1,6,\"Left\"],[3,6,\"Right\"],[12,7,\"Left\"],[10,7,\"Right\"],[7,8,\"Unary\"],[11,9,\"Unary\"],[5,10,\"Unary\"],[6,11,\"Unary\"],[4,12,\"Unary\"]]}},\"data\":\"Bfv\"}`)\n  const exGraph = dataToGraph(sampleData, true);\n  const [selectedLine, setLine] = useState<number>(0);\n  const [vertSize, setVertSize] = useState<any[]>();\n  const [horSize, setHorSize] = useState<any[]>();\n  const [currGraph, setGraph] = useState(exGraph);\n  const [selected, select] = useState<SelectionT | null>(null);\n\n  const updateLine = useCallback(\n    (lineNumber: number) => {\n      setLine(lineNumber)\n      const graph = {\n        nodes: [\n          {\n            id: 1, \n            title: `line ${lineNumber}`, \n            type: 'empty', \n            x: -10, \n            y: 0\n          },\n          {\n            id: 2, \n            title: `test_func`, \n            type: 'problematic', \n            x: 0, \n            y: 0\n          }\n        ], \n        edges: [\n          { source: 1, target: 2, directed: true, arrowhead: 'normal' }\n        ]\n      }\n      setGraph(lineNumber !== 1 ? graph : exGraph)\n    }, [setLine, setGraph]\n  )\n\n  const updateSelection = useCallback(\n    (selection, e) => {select(selection); console.log(selection.nodes?.values().next().value)}, [select]\n  )\n\n  return (\n    <div className='splits'>\n      <ReactSplit direction={SplitDirection.Horizontal} onResizeFinished={(p, n) => setHorSize(n)} initialSizes={horSize}>\n        <div className=\"pane\">\n          <ReactSplit direction={SplitDirection.Vertical} onResizeFinished={(p, n) => setVertSize(n)} initialSizes={vertSize}>\n            <div className='pane'><CodeBlock \n            code={exampleCode} \n            onClickHandler={updateLine}\n            selectedLine={selectedLine}\n            ></CodeBlock></div>\n            <div className='pane'><NodeInfo info={selected?.nodes?.values().next().value}/></div>\n          </ReactSplit>\n        </div>\n        <div className='pane'><UberGraph\n          graph={currGraph} onSelect={updateSelection} selected={selected} /></div>\n      </ReactSplit>\n    </div>\n  );\n}\n\n\n\nfunction NodeInfo({info}) {\n  if (info !== null) {\n    return <p>{JSON.stringify(info)}</p>\n  }\n  return <p>{JSON.stringify(info)}</p>\n}\n\n\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAGC,QAAQ,QAAQ,OAAO;AACrD,SAASC,KAAK,IAAIC,iBAAiB,QAAQ,0BAA0B;AACrE,SAASC,QAAQ,QAAQ,gDAAgD;AACzE,OAAOC,UAAU,IAAIC,cAAc,QAAQ,qBAAqB;AAChE,OAAO,WAAW;AAElB,SAASC,SAAS,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AASxC,SAASC,SAASA,CAAC;EAAEC,IAAI;EAAEC,cAAc;EAAEC;AAA6B,CAAC,EAAE;EAAAC,EAAA;EACzE,MAAMC,YAAY,GAAGf,WAAW,CAC7BgB,UAAkB,IAAKJ,cAAc,CAACI,UAAU,CAAC,EAClD,CAACJ,cAAc,CACjB,CAAC;EAED,MAAMK,SAAS,GAAGjB,WAAW,CAAEgB,UAAkB,IAAK;IACpD,OAAOA,UAAU,KAAKH,YAAY,GAChC;MACEK,OAAO,EAAEA,CAAA,KAAMH,YAAY,CAACC,UAAU;IACxC,CAAC,GACD;MACEE,OAAO,EAAEA,CAAA,KAAMH,YAAY,CAACC,UAAU,CAAC;MACvCG,KAAK,EAAE;QAACC,eAAe,EAAE;MAAa;IACxC,CAAC;EACL,CAAC,EAAE,CAACL,YAAY,EAAEF,YAAY,CAAC,CAAC;EAEhC,oBACEJ,OAAA,CAACN,iBAAiB;IAChBkB,QAAQ,EAAC,MAAM;IACfF,KAAK,EAAEf,QAAS;IAChBkB,eAAe,EAAE,IAAK;IACtBC,SAAS,EAAE,IAAK;IAChBC,eAAe,EAAE,IAAK;IACtBP,SAAS,EAAEA,SAAU;IACrBQ,eAAe,EAAE;MAACC,QAAQ,EAAE;IAAE,CAAE;IAAAC,QAAA,EAE/BhB;EAAI;IAAAiB,QAAA,EAAAC,YAAA;IAAAb,UAAA;IAAAc,YAAA;EAAA,OACY,CAAC;AAExB;AAAChB,EAAA,CA9BQJ,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AA8BjB;AAED,MAAMsB,gBAAgB,GAAG;EACvBC,KAAK,EAAE,CACH;IAAEC,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAQ,CAAC,EACpC;IAAEF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAS,CAAC,EACrC;IAAEF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,GAAG;IAAEC,IAAI,EAAE;EAAS,CAAC,EACrC;IAAEF,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,QAAQ;IAAEC,IAAI,EAAE,OAAO;IAAEC,IAAI,EAAE;EAAU,CAAC,CAC7D;EACDC,KAAK,EAAE,CACL;IAAEC,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,QAAQ,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAS,CAAC,EAC7D;IAAEH,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,QAAQ,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAS,CAAC,EAC7D;IAAEH,MAAM,EAAE,CAAC;IAAEC,MAAM,EAAE,CAAC;IAAEC,QAAQ,EAAE,IAAI;IAAEC,SAAS,EAAE;EAAS,CAAC;AAEjE,CAAC;AAED,MAAMC,WAAmB,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AAEF,MAAMC,WAAW,GAAGA,CAACC,IAA+E,EAAEC,QAAiB,KAAK;EAE1HD,IAAI,GAAGA,IAAI,CAACE,KAAK,CAACA,KAAK;EACvB,IAAId,KAAY,GAAG,EAAE;EACrB,IAAIK,KAAY,GAAG,EAAE;EACrB,IAAIQ,QAAQ,EAAE;IACZ,KAAK,IAAIE,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACZ,KAAK,CAACgB,MAAM,EAAE,EAAED,CAAC,EAAE;MAClD,IAAIH,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,CAACC,WAAW,IAAIC,MAAM,IAAIP,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,CAACG,cAAc,CAAC,iBAAiB,CAAC,EAAE;QAC9GpB,KAAK,CAACqB,IAAI,CAAC;UAACpB,EAAE,EAAEc,CAAC;UAAEb,KAAK,EAAEoB,IAAI,CAACC,SAAS,CAACX,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,CAACO,eAAe,CAAC;UAAErB,IAAI,EAAE;QAAO,CAAC,CAAC;MACpG,CAAC,MAAM;QACLH,KAAK,CAACqB,IAAI,CAAC;UAACpB,EAAE,EAAEc,CAAC;UAAEb,KAAK,EAAEoB,IAAI,CAACC,SAAS,CAACX,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,CAAC;UAAEd,IAAI,EAAE;QAAO,CAAC,CAAC;MACpF;IACF;IACA,KAAK,IAAIY,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACP,KAAK,CAACW,MAAM,EAAE,EAAED,CAAC,EAAE;MAClDV,KAAK,CAACgB,IAAI,CAAC;QAACf,MAAM,EAAEM,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC;QAAER,MAAM,EAAEK,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC;QAAEZ,IAAI,EAAES,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC;MAAC,CAAC,CAAC;IAC1F;EACF,CAAC,MAAM;IACL,KAAK,IAAIA,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACZ,KAAK,CAACgB,MAAM,EAAE,EAAED,CAAC,EAAE;MAClD,IAAIH,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,CAACC,WAAW,IAAIC,MAAM,IAAIP,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,CAACG,cAAc,CAAC,iBAAiB,CAAC,EAAE;QAC9GpB,KAAK,CAACqB,IAAI,CAAC;UAACpB,EAAE,EAAEc,CAAC;UAAEb,KAAK,EAAEoB,IAAI,CAACC,SAAS,CAACX,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,CAACO,eAAe,CAAC;UAAErB,IAAI,EAAE;QAAO,CAAC,CAAC;MACpG,CAAC,MAAM,IAAIS,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,IAAI,aAAa,EAAE,CAErD,CAAC,MAAM;QACLjB,KAAK,CAACqB,IAAI,CAAC;UAACpB,EAAE,EAAEc,CAAC;UAAEb,KAAK,EAAEoB,IAAI,CAACC,SAAS,CAACX,IAAI,CAACZ,KAAK,CAACe,CAAC,CAAC,CAACE,SAAS,CAAC;UAAEd,IAAI,EAAE;QAAO,CAAC,CAAC;MACpF;IACF;IACA,IAAIsB,YAAY,GAAGC,KAAK,CAAS,CAAC,CAAC;IAEnC,KAAK,IAAIX,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACP,KAAK,CAACW,MAAM,EAAE,EAAED,CAAC,EAAE;MAClD,IAAIH,IAAI,CAACZ,KAAK,CAACY,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACE,SAAS,IAAI,aAAa,EAAE;QAC3DQ,YAAY,CAACb,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC;MACnD,CAAC,MAAM,IAAIH,IAAI,CAACZ,KAAK,CAACY,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACE,SAAS,IAAI,aAAa,EAAE;QAClEZ,KAAK,CAACgB,IAAI,CAAC;UAACf,MAAM,EAAEM,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC;UAAER,MAAM,EAAEK,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC;UAAEZ,IAAI,EAAES,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC;MAC1F;IACF;IACA,KAAK,IAAIA,CAAS,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAACP,KAAK,CAACW,MAAM,EAAE,EAAED,CAAC,EAAE;MAClD,IAAIH,IAAI,CAACZ,KAAK,CAACY,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACE,SAAS,IAAI,aAAa,EAAE;QAC3DZ,KAAK,CAACgB,IAAI,CAAC;UAACf,MAAM,EAAEmB,YAAY,CAACb,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAAER,MAAM,EAAEK,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC,CAAC;UAAEZ,IAAI,EAAES,IAAI,CAACP,KAAK,CAACU,CAAC,CAAC,CAAC,CAAC;QAAC,CAAC,CAAC;MACxG;IACF;EACF;EACA,OAAO;IAACf,KAAK,EAAEA,KAAK;IAAEK,KAAK,EAAEA;EAAK,CAAC;AACrC,CAAC;AAGD,MAAMsB,GAAG,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAAA,IAAAC,eAAA;EAEhB,MAAMC,UAAU,GAAGR,IAAI,CAACS,KAAK,CAAE,gqBAA+pB,CAAC;EAC/rB,MAAMC,OAAO,GAAGrB,WAAW,CAACmB,UAAU,EAAE,IAAI,CAAC;EAC7C,MAAM,CAAClD,YAAY,EAAEqD,OAAO,CAAC,GAAGjE,QAAQ,CAAS,CAAC,CAAC;EACnD,MAAM,CAACkE,QAAQ,EAAEC,WAAW,CAAC,GAAGnE,QAAQ,CAAQ,CAAC;EACjD,MAAM,CAACoE,OAAO,EAAEC,UAAU,CAAC,GAAGrE,QAAQ,CAAQ,CAAC;EAC/C,MAAM,CAACsE,SAAS,EAAEC,QAAQ,CAAC,GAAGvE,QAAQ,CAACgE,OAAO,CAAC;EAC/C,MAAM,CAACQ,QAAQ,EAAEC,MAAM,CAAC,GAAGzE,QAAQ,CAAoB,IAAI,CAAC;EAE5D,MAAM0E,UAAU,GAAG3E,WAAW,CAC3BgB,UAAkB,IAAK;IACtBkD,OAAO,CAAClD,UAAU,CAAC;IACnB,MAAM+B,KAAK,GAAG;MACZd,KAAK,EAAE,CACL;QACEC,EAAE,EAAE,CAAC;QACLC,KAAK,EAAG,QAAOnB,UAAW,EAAC;QAC3BoB,IAAI,EAAE,OAAO;QACbwC,CAAC,EAAE,CAAC,EAAE;QACNC,CAAC,EAAE;MACL,CAAC,EACD;QACE3C,EAAE,EAAE,CAAC;QACLC,KAAK,EAAG,WAAU;QAClBC,IAAI,EAAE,aAAa;QACnBwC,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE;MACL,CAAC,CACF;MACDvC,KAAK,EAAE,CACL;QAAEC,MAAM,EAAE,CAAC;QAAEC,MAAM,EAAE,CAAC;QAAEC,QAAQ,EAAE,IAAI;QAAEC,SAAS,EAAE;MAAS,CAAC;IAEjE,CAAC;IACD8B,QAAQ,CAACxD,UAAU,KAAK,CAAC,GAAG+B,KAAK,GAAGkB,OAAO,CAAC;EAC9C,CAAC,EAAE,CAACC,OAAO,EAAEM,QAAQ,CACvB,CAAC;EAED,MAAMM,eAAe,GAAG9E,WAAW,CACjC,CAAC+E,SAAS,EAAEC,CAAC,KAAK;IAAA,IAAAC,gBAAA;IAACP,MAAM,CAACK,SAAS,CAAC;IAAEG,OAAO,CAACC,GAAG,EAAAF,gBAAA,GAACF,SAAS,CAAC9C,KAAK,cAAAgD,gBAAA,uBAAfA,gBAAA,CAAiBG,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC;EAAA,CAAC,EAAE,CAACZ,MAAM,CACrG,CAAC;EAED,oBACEjE,OAAA;IAAK8E,SAAS,EAAC,QAAQ;IAAA5D,QAAA,eACrBlB,OAAA,CAACJ,UAAU;MAACmF,SAAS,EAAElF,cAAc,CAACmF,UAAW;MAACC,gBAAgB,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKtB,UAAU,CAACsB,CAAC,CAAE;MAACC,YAAY,EAAExB,OAAQ;MAAA1C,QAAA,gBACjHlB,OAAA;QAAK8E,SAAS,EAAC,MAAM;QAAA5D,QAAA,eACnBlB,OAAA,CAACJ,UAAU;UAACmF,SAAS,EAAElF,cAAc,CAACwF,QAAS;UAACJ,gBAAgB,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKxB,WAAW,CAACwB,CAAC,CAAE;UAACC,YAAY,EAAE1B,QAAS;UAAAxC,QAAA,gBACjHlB,OAAA;YAAK8E,SAAS,EAAC,MAAM;YAAA5D,QAAA,eAAClB,OAAA,CAACC,SAAS;cAChCC,IAAI,EAAEgC,WAAY;cAClB/B,cAAc,EAAE+D,UAAW;cAC3B9D,YAAY,EAAEA;YAAa;cAAAe,QAAA,EAAAC,YAAA;cAAAb,UAAA;cAAAc,YAAA;YAAA,OACf;UAAC;YAAAF,QAAA,EAAAC,YAAA;YAAAb,UAAA;YAAAc,YAAA;UAAA,OAAK,CAAC,eACnBrB,OAAA;YAAK8E,SAAS,EAAC,MAAM;YAAA5D,QAAA,eAAClB,OAAA,CAACsF,QAAQ;cAACC,IAAI,EAAEvB,QAAQ,aAARA,QAAQ,wBAAAX,eAAA,GAARW,QAAQ,CAAExC,KAAK,cAAA6B,eAAA,uBAAfA,eAAA,CAAiBsB,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC;YAAM;cAAA1D,QAAA,EAAAC,YAAA;cAAAb,UAAA;cAAAc,YAAA;YAAA,OAAC;UAAC;YAAAF,QAAA,EAAAC,YAAA;YAAAb,UAAA;YAAAc,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAF,QAAA,EAAAC,YAAA;UAAAb,UAAA;UAAAc,YAAA;QAAA,OAC3E;MAAC;QAAAF,QAAA,EAAAC,YAAA;QAAAb,UAAA;QAAAc,YAAA;MAAA,OACV,CAAC,eACNrB,OAAA;QAAK8E,SAAS,EAAC,MAAM;QAAA5D,QAAA,eAAClB,OAAA,CAACF,SAAS;UAC9BwC,KAAK,EAAEwB,SAAU;UAAC0B,QAAQ,EAAEnB,eAAgB;UAACL,QAAQ,EAAEA;QAAS;UAAA7C,QAAA,EAAAC,YAAA;UAAAb,UAAA;UAAAc,YAAA;QAAA,OAAE;MAAC;QAAAF,QAAA,EAAAC,YAAA;QAAAb,UAAA;QAAAc,YAAA;MAAA,OAAK,CAAC;IAAA;MAAAF,QAAA,EAAAC,YAAA;MAAAb,UAAA;MAAAc,YAAA;IAAA,OACjE;EAAC;IAAAF,QAAA,EAAAC,YAAA;IAAAb,UAAA;IAAAc,YAAA;EAAA,OACV,CAAC;AAEV,CAAC;AAAA+B,GAAA,CA5DKD,GAAG;AAAAsC,GAAA,GAAHtC,GAAG;AAgET,SAASmC,QAAQA,CAAC;EAACC;AAAI,CAAC,EAAE;EACxB,IAAIA,IAAI,KAAK,IAAI,EAAE;IACjB,oBAAOvF,OAAA;MAAAkB,QAAA,EAAI4B,IAAI,CAACC,SAAS,CAACwC,IAAI;IAAC;MAAApE,QAAA,EAAAC,YAAA;MAAAb,UAAA;MAAAc,YAAA;IAAA,OAAI,CAAC;EACtC;EACA,oBAAOrB,OAAA;IAAAkB,QAAA,EAAI4B,IAAI,CAACC,SAAS,CAACwC,IAAI;EAAC;IAAApE,QAAA,EAAAC,YAAA;IAAAb,UAAA;IAAAc,YAAA;EAAA,OAAI,CAAC;AACtC;AAACqE,GAAA,GALQJ,QAAQ;AAQjB,eAAenC,GAAG;AAAC,IAAA7B,EAAA,EAAAmE,GAAA,EAAAC,GAAA;AAAAC,YAAA,CAAArE,EAAA;AAAAqE,YAAA,CAAAF,GAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}