{"ast":null,"code":"var _jsxFileName = \"/home/bryanli/Sunscreen/Sunscreen/fhe-debugger/fhe-debugger-frontend/src/UberGraph.tsx\";\nimport { GraphView } from \"react-digraph\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphConfig = {\n  NodeTypes: {\n    empty: {\n      // required to show empty nodes\n      typeText: \"None\",\n      shapeId: \"#empty\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: \"empty\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    },\n    input: {\n      // required to show empty nodes\n      typeText: \"Input\",\n      shapeId: \"#input\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: \"input\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this)\n    },\n    output: {\n      // required to show empty nodes\n      typeText: \"Output\",\n      shapeId: \"#output\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: \"input\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    },\n    custom: {\n      // required to show empty nodes\n      typeText: \"Custom\",\n      shapeId: \"#custom\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 50 25\",\n        id: \"custom\",\n        children: /*#__PURE__*/_jsxDEV(\"ellipse\", {\n          cx: \"50\",\n          cy: \"25\",\n          rx: \"50\",\n          ry: \"25\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    },\n    problematic: {\n      typeText: \"Problematic\",\n      shapeId: \"#problem\",\n      // relates to the type property of a node\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 100 100\",\n        id: \"problem\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"50\",\n          cy: \"50\",\n          r: \"45\",\n          fill: \"pink\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }\n  },\n  NodeSubtypes: {},\n  EdgeTypes: {\n    emptyEdge: {\n      // required to show empty edges\n      shapeId: \"#emptyEdge\",\n      shape: /*#__PURE__*/_jsxDEV(\"symbol\", {\n        viewBox: \"0 0 50 50\",\n        id: \"emptyEdge\",\n        children: /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: \"25\",\n          cy: \"25\",\n          r: \"8\",\n          fill: \"currentColor\",\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)\n    }\n  }\n};\nfunction UberGraph({\n  graph,\n  onSelect,\n  selected\n}) {\n  // const [selected, select] = useState(null);\n  console.log('render');\n  return /*#__PURE__*/_jsxDEV(GraphView, {\n    nodeKey: \"id\",\n    nodes: graph.nodes,\n    edges: graph.edges,\n    allowMultiselect: false,\n    layoutEngineType: \"VerticalTree\",\n    readOnly: true,\n    nodeTypes: GraphConfig.NodeTypes,\n    edgeTypes: GraphConfig.EdgeTypes,\n    nodeSubtypes: GraphConfig.NodeSubtypes,\n    onCreateNode: () => {},\n    selected: selected,\n    onSwapEdge: () => {},\n    onCreateEdge: () => {},\n    onSelect: onSelect\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n}\n_c = UberGraph;\nexport { UberGraph };\nvar _c;\n$RefreshReg$(_c, \"UberGraph\");","map":{"version":3,"names":["GraphView","React","jsxDEV","_jsxDEV","GraphConfig","NodeTypes","empty","typeText","shapeId","shape","viewBox","id","children","cx","cy","r","fileName","_jsxFileName","lineNumber","columnNumber","input","output","custom","rx","ry","problematic","fill","NodeSubtypes","EdgeTypes","emptyEdge","UberGraph","graph","onSelect","selected","console","log","nodeKey","nodes","edges","allowMultiselect","layoutEngineType","readOnly","nodeTypes","edgeTypes","nodeSubtypes","onCreateNode","onSwapEdge","onCreateEdge","_c","$RefreshReg$"],"sources":["/home/bryanli/Sunscreen/Sunscreen/fhe-debugger/fhe-debugger-frontend/src/UberGraph.tsx"],"sourcesContent":["import { GraphView } from \"react-digraph\";\r\nimport React from \"react\";\r\n\r\nconst GraphConfig =  {\r\n  NodeTypes: {\r\n    empty: { // required to show empty nodes\r\n      typeText: \"None\",\r\n      shapeId: \"#empty\", // relates to the type property of a node\r\n      shape: (\r\n        <symbol viewBox=\"0 0 100 100\" id=\"empty\" key=\"0\">\r\n          <circle cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n        </symbol>\r\n      )\r\n    },\r\n    input: { // required to show empty nodes\r\n      typeText: \"Input\",\r\n      shapeId: \"#input\", // relates to the type property of a node\r\n      shape: (\r\n        <symbol viewBox=\"0 0 100 100\" id=\"input\" key=\"0\">\r\n          <circle cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n        </symbol>\r\n      )\r\n    },\r\n    output: { // required to show empty nodes\r\n      typeText: \"Output\",\r\n      shapeId: \"#output\", // relates to the type property of a node\r\n      shape: (\r\n        <symbol viewBox=\"0 0 100 100\" id=\"input\" key=\"0\">\r\n          <circle cx=\"50\" cy=\"50\" r=\"45\"></circle>\r\n        </symbol>\r\n      )\r\n    },\r\n    custom: { // required to show empty nodes\r\n      typeText: \"Custom\",\r\n      shapeId: \"#custom\", // relates to the type property of a node\r\n      shape: (\r\n        <symbol viewBox=\"0 0 50 25\" id=\"custom\" key=\"0\">\r\n          <ellipse cx=\"50\" cy=\"25\" rx=\"50\" ry=\"25\"></ellipse>\r\n        </symbol>\r\n      )\r\n    },\r\n    problematic: {\r\n      typeText: \"Problematic\",\r\n      shapeId: \"#problem\", // relates to the type property of a node\r\n      shape: (\r\n        <symbol viewBox=\"0 0 100 100\" id=\"problem\" key=\"0\">\r\n          <circle cx=\"50\" cy=\"50\" r=\"45\" fill='pink'></circle>\r\n        </symbol>\r\n      )\r\n    }\r\n  },\r\n  NodeSubtypes: {},\r\n  EdgeTypes: {\r\n    emptyEdge: {  // required to show empty edges\r\n      shapeId: \"#emptyEdge\",\r\n      shape: (\r\n        <symbol viewBox=\"0 0 50 50\" id=\"emptyEdge\" key=\"0\">\r\n          <circle cx=\"25\" cy=\"25\" r=\"8\" fill=\"currentColor\"> </circle>\r\n        </symbol>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nfunction UberGraph({graph, onSelect, selected}) {\r\n  // const [selected, select] = useState(null);\r\n  console.log('render')\r\n  return (\r\n  <GraphView\r\n    nodeKey=\"id\"\r\n    nodes={graph.nodes}\r\n    edges={graph.edges}\r\n    allowMultiselect={false}\r\n    layoutEngineType='VerticalTree'\r\n    readOnly={true}\r\n    nodeTypes={GraphConfig.NodeTypes}\r\n    edgeTypes={GraphConfig.EdgeTypes}\r\n    nodeSubtypes={GraphConfig.NodeSubtypes}\r\n    onCreateNode={() => {}}\r\n    selected={selected}\r\n    onSwapEdge={() => {}}\r\n    onCreateEdge={() => {}}\r\n    onSelect={onSelect}\r\n  />)\r\n}\r\nexport {UberGraph};\r\n\r\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAI;EACnBC,SAAS,EAAE;IACTC,KAAK,EAAE;MAAE;MACPC,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE,QAAQ;MAAE;MACnBC,KAAK,eACHN,OAAA;QAAQO,OAAO,EAAC,aAAa;QAACC,EAAE,EAAC,OAAO;QAAAC,QAAA,eACtCT,OAAA;UAAQU,EAAE,EAAC,IAAI;UAACC,EAAE,EAAC,IAAI;UAACC,CAAC,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS;MAAC,GADG,GAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExC;IAEZ,CAAC;IACDC,KAAK,EAAE;MAAE;MACPb,QAAQ,EAAE,OAAO;MACjBC,OAAO,EAAE,QAAQ;MAAE;MACnBC,KAAK,eACHN,OAAA;QAAQO,OAAO,EAAC,aAAa;QAACC,EAAE,EAAC,OAAO;QAAAC,QAAA,eACtCT,OAAA;UAAQU,EAAE,EAAC,IAAI;UAACC,EAAE,EAAC,IAAI;UAACC,CAAC,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS;MAAC,GADG,GAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExC;IAEZ,CAAC;IACDE,MAAM,EAAE;MAAE;MACRd,QAAQ,EAAE,QAAQ;MAClBC,OAAO,EAAE,SAAS;MAAE;MACpBC,KAAK,eACHN,OAAA;QAAQO,OAAO,EAAC,aAAa;QAACC,EAAE,EAAC,OAAO;QAAAC,QAAA,eACtCT,OAAA;UAAQU,EAAE,EAAC,IAAI;UAACC,EAAE,EAAC,IAAI;UAACC,CAAC,EAAC;QAAI;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS;MAAC,GADG,GAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAExC;IAEZ,CAAC;IACDG,MAAM,EAAE;MAAE;MACRf,QAAQ,EAAE,QAAQ;MAClBC,OAAO,EAAE,SAAS;MAAE;MACpBC,KAAK,eACHN,OAAA;QAAQO,OAAO,EAAC,WAAW;QAACC,EAAE,EAAC,QAAQ;QAAAC,QAAA,eACrCT,OAAA;UAASU,EAAE,EAAC,IAAI;UAACC,EAAE,EAAC,IAAI;UAACS,EAAE,EAAC,IAAI;UAACC,EAAE,EAAC;QAAI;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAU;MAAC,GADT,GAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEvC;IAEZ,CAAC;IACDM,WAAW,EAAE;MACXlB,QAAQ,EAAE,aAAa;MACvBC,OAAO,EAAE,UAAU;MAAE;MACrBC,KAAK,eACHN,OAAA;QAAQO,OAAO,EAAC,aAAa;QAACC,EAAE,EAAC,SAAS;QAAAC,QAAA,eACxCT,OAAA;UAAQU,EAAE,EAAC,IAAI;UAACC,EAAE,EAAC,IAAI;UAACC,CAAC,EAAC,IAAI;UAACW,IAAI,EAAC;QAAM;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS;MAAC,GADP,GAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE1C;IAEZ;EACF,CAAC;EACDQ,YAAY,EAAE,CAAC,CAAC;EAChBC,SAAS,EAAE;IACTC,SAAS,EAAE;MAAG;MACZrB,OAAO,EAAE,YAAY;MACrBC,KAAK,eACHN,OAAA;QAAQO,OAAO,EAAC,WAAW;QAACC,EAAE,EAAC,WAAW;QAAAC,QAAA,eACxCT,OAAA;UAAQU,EAAE,EAAC,IAAI;UAACC,EAAE,EAAC,IAAI;UAACC,CAAC,EAAC,GAAG;UAACW,IAAI,EAAC,cAAc;UAAAd,QAAA,EAAC;QAAC;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC,GADf,GAAG;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAE1C;IAEZ;EACF;AACF,CAAC;AAED,SAASW,SAASA,CAAC;EAACC,KAAK;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,EAAE;EAC9C;EACAC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrB,oBACAhC,OAAA,CAACH,SAAS;IACRoC,OAAO,EAAC,IAAI;IACZC,KAAK,EAAEN,KAAK,CAACM,KAAM;IACnBC,KAAK,EAAEP,KAAK,CAACO,KAAM;IACnBC,gBAAgB,EAAE,KAAM;IACxBC,gBAAgB,EAAC,cAAc;IAC/BC,QAAQ,EAAE,IAAK;IACfC,SAAS,EAAEtC,WAAW,CAACC,SAAU;IACjCsC,SAAS,EAAEvC,WAAW,CAACwB,SAAU;IACjCgB,YAAY,EAAExC,WAAW,CAACuB,YAAa;IACvCkB,YAAY,EAAEA,CAAA,KAAM,CAAC,CAAE;IACvBZ,QAAQ,EAAEA,QAAS;IACnBa,UAAU,EAAEA,CAAA,KAAM,CAAC,CAAE;IACrBC,YAAY,EAAEA,CAAA,KAAM,CAAC,CAAE;IACvBf,QAAQ,EAAEA;EAAS;IAAAhB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AACJ;AAAC6B,EAAA,GApBQlB,SAAS;AAqBlB,SAAQA,SAAS;AAAE,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}